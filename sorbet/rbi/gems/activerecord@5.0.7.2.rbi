# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activerecord` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module ActiveRecord
  extend ::ActiveSupport::Autoload

  class << self
    def eager_load!; end
    def gem_version; end
    def version; end
  end
end

class ActiveRecord::ActiveRecordError < ::StandardError; end
class ActiveRecord::AdapterNotFound < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::AdapterNotSpecified < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Aggregations
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Aggregations::ClassMethods

  def reload(*_arg0); end

  private

  def clear_aggregation_cache; end
  def init_internals; end
  def initialize_dup(*_arg0); end
end

module ActiveRecord::Aggregations::ClassMethods
  def composed_of(part_id, options = T.unsafe(nil)); end

  private

  def reader_method(name, class_name, mapping, allow_nil, constructor); end
  def writer_method(name, class_name, mapping, allow_nil, converter); end
end

class ActiveRecord::AssociationNotFoundError < ::ActiveRecord::ConfigurationError
  def initialize(record = T.unsafe(nil), association_name = T.unsafe(nil)); end
end

class ActiveRecord::AssociationRelation < ::ActiveRecord::Relation
  def initialize(klass, table, predicate_builder, association); end

  def ==(other); end
  def build(*args, &block); end
  def create(*args, &block); end
  def create!(*args, &block); end
  def new(*args, &block); end
  def proxy_association; end

  private

  def exec_queries; end
end

class ActiveRecord::AssociationTypeMismatch < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Associations
  extend ::ActiveSupport::Autoload
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Associations::ClassMethods

  def association(name); end
  def association_cached?(name); end
  def reload(*_arg0); end

  private

  def association_instance_get(name); end
  def association_instance_set(name, association); end
  def clear_association_cache; end
  def init_internals; end
  def initialize_dup(*_arg0); end

  class << self
    def eager_load!; end
  end
end

class ActiveRecord::Associations::AliasTracker
  def initialize(connection, aliases, type_caster); end

  def aliased_table_for(table_name, aliased_name); end
  def aliases; end

  private

  def truncate(name); end

  class << self
    def create(connection, initial_table, type_caster); end
    def create_with_joins(connection, initial_table, joins, type_caster); end
    def initial_count_for(connection, name, table_joins); end
  end
end

class ActiveRecord::Associations::Association
  def initialize(owner, reflection); end

  def aliased_table_name; end
  def association_scope; end
  def extensions; end
  def initialize_attributes(record, except_from_scope_attributes = T.unsafe(nil)); end
  def interpolate(sql, record = T.unsafe(nil)); end
  def inversed; end
  def inversed=(_arg0); end
  def klass; end
  def load_target; end
  def loaded!; end
  def loaded?; end
  def marshal_dump; end
  def marshal_load(data); end
  def options(*args, &block); end
  def owner; end
  def reflection; end
  def reload; end
  def reset; end
  def reset_scope; end
  def scope; end
  def set_inverse_instance(record); end
  def stale_target?; end
  def target; end
  def target=(target); end
  def target_scope; end

  private

  def build_record(attributes); end
  def creation_attributes; end
  def find_target?; end
  def foreign_key_for?(record); end
  def foreign_key_present?; end
  def inverse_reflection_for(record); end
  def invertible_for?(record); end
  def raise_on_type_mismatch!(record); end
  def set_owner_attributes(record); end
  def skip_statement_cache?; end
  def stale_state; end
end

class ActiveRecord::Associations::AssociationScope
  def initialize(value_transformation); end

  def join_type; end
  def scope(association, connection); end

  protected

  def value_transformation; end

  private

  def add_constraints(scope, owner, association_klass, refl, chain_head, chain_tail); end
  def eval_scope(klass, scope, owner); end
  def get_chain(reflection, association, tracker); end
  def join(table, constraint); end
  def last_chain_scope(scope, table, reflection, owner, association_klass); end
  def next_chain_scope(scope, table, reflection, association_klass, foreign_table, next_reflection); end
  def transform_value(value); end

  class << self
    def create(&block); end
    def get_bind_values(owner, chain); end
    def scope(association, connection); end
  end
end

ActiveRecord::Associations::AssociationScope::INSTANCE = T.let(T.unsafe(nil), ActiveRecord::Associations::AssociationScope)

class ActiveRecord::Associations::AssociationScope::ReflectionProxy < ::SimpleDelegator
  def initialize(reflection, alias_name); end

  def alias_name; end
  def all_includes; end
  def next; end
  def next=(_arg0); end
end

class ActiveRecord::Associations::BelongsToAssociation < ::ActiveRecord::Associations::SingularAssociation
  def decrement_counters; end
  def handle_dependency; end
  def increment_counters; end
  def replace(record); end
  def reset; end
  def updated?; end

  private

  def different_target?(record); end
  def find_target?; end
  def foreign_key_present?; end
  def invertible_for?(record); end
  def remove_keys; end
  def replace_keys(record); end
  def require_counter_update?; end
  def stale_state; end
  def target_id; end
  def update_counters(by); end
  def update_counters_on_replace(record); end
end

class ActiveRecord::Associations::BelongsToPolymorphicAssociation < ::ActiveRecord::Associations::BelongsToAssociation
  def klass; end

  private

  def different_target?(record); end
  def inverse_reflection_for(record); end
  def raise_on_type_mismatch!(record); end
  def remove_keys; end
  def replace_keys(record); end
  def stale_state; end
end

module ActiveRecord::Associations::Builder; end

class ActiveRecord::Associations::Builder::Association
  class << self
    def add_destroy_callbacks(model, reflection); end
    def build(model, name, scope, options, &block); end
    def build_scope(scope, extension); end
    def check_dependent_options(dependent); end
    def create_reflection(model, name, scope, options, extension = T.unsafe(nil)); end
    def define_accessors(model, reflection); end
    def define_callbacks(model, reflection); end
    def define_extensions(model, name); end
    def define_readers(mixin, name); end
    def define_validations(model, reflection); end
    def define_writers(mixin, name); end
    def extensions; end
    def extensions=(_arg0); end
    def macro; end
    def valid_dependent_options; end
    def valid_options(options); end
    def validate_options(options); end
    def wrap_scope(scope, extension); end
  end
end

ActiveRecord::Associations::Builder::Association::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Associations::Builder::BelongsTo < ::ActiveRecord::Associations::Builder::SingularAssociation
  class << self
    def add_counter_cache_callbacks(model, reflection); end
    def add_counter_cache_methods(mixin); end
    def add_destroy_callbacks(model, reflection); end
    def add_touch_callbacks(model, reflection); end
    def define_accessors(mixin, reflection); end
    def define_callbacks(model, reflection); end
    def define_validations(model, reflection); end
    def macro; end
    def touch_record(o, foreign_key, name, touch, touch_method); end
    def valid_dependent_options; end
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::CollectionAssociation < ::ActiveRecord::Associations::Builder::Association
  class << self
    def define_callback(model, callback_name, name, options); end
    def define_callbacks(model, reflection); end
    def define_extensions(model, name); end
    def define_readers(mixin, name); end
    def define_writers(mixin, name); end
    def valid_options(options); end
    def wrap_scope(scope, mod); end
  end
end

ActiveRecord::Associations::Builder::CollectionAssociation::CALLBACKS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Associations::Builder::HasAndBelongsToMany
  def initialize(association_name, lhs_model, options); end

  def association_name; end
  def lhs_model; end
  def middle_reflection(join_model); end
  def options; end
  def through_model; end

  private

  def belongs_to_options(options); end
  def middle_options(join_model); end
end

class ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver
  class << self
    def build(lhs_class, name, options); end
  end
end

class ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownClass
  def initialize(lhs_class, rhs_class_name); end

  def join_table; end

  private

  def klass; end
end

class ActiveRecord::Associations::Builder::HasAndBelongsToMany::JoinTableResolver::KnownTable < ::Struct
  def join_table; end
  def join_table=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Associations::Builder::HasMany < ::ActiveRecord::Associations::Builder::CollectionAssociation
  class << self
    def macro; end
    def valid_dependent_options; end
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::HasOne < ::ActiveRecord::Associations::Builder::SingularAssociation
  class << self
    def add_destroy_callbacks(model, reflection); end
    def define_validations(model, reflection); end
    def macro; end
    def valid_dependent_options; end
    def valid_options(options); end
  end
end

class ActiveRecord::Associations::Builder::SingularAssociation < ::ActiveRecord::Associations::Builder::Association
  class << self
    def define_accessors(model, reflection); end
    def define_constructors(mixin, name); end
    def valid_options(options); end
  end
end

module ActiveRecord::Associations::ClassMethods
  def belongs_to(name, scope = T.unsafe(nil), options = T.unsafe(nil)); end
  def has_and_belongs_to_many(name, scope = T.unsafe(nil), options = T.unsafe(nil), &extension); end
  def has_many(name, scope = T.unsafe(nil), options = T.unsafe(nil), &extension); end
  def has_one(name, scope = T.unsafe(nil), options = T.unsafe(nil)); end
end

class ActiveRecord::Associations::CollectionAssociation < ::ActiveRecord::Associations::Association
  def add_to_target(record, skip_callbacks = T.unsafe(nil), &block); end
  def any?; end
  def build(attributes = T.unsafe(nil), &block); end
  def concat(*records); end
  def count(column_name = T.unsafe(nil)); end
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def delete(*records); end
  def delete_all(dependent = T.unsafe(nil)); end
  def destroy(*records); end
  def destroy_all; end
  def distinct; end
  def empty?; end
  def fifth(*args); end
  def find(*args); end
  def first(*args); end
  def forty_two(*args); end
  def fourth(*args); end
  def ids_reader; end
  def ids_writer(ids); end
  def include?(record); end
  def last(*args); end
  def length; end
  def load_target; end
  def many?; end
  def null_scope?; end
  def reader(force_reload = T.unsafe(nil)); end
  def replace(other_array); end
  def reset; end
  def scope; end
  def second(*args); end
  def second_to_last(*args); end
  def select(*fields); end
  def size; end
  def take(n = T.unsafe(nil)); end
  def third(*args); end
  def third_to_last(*args); end
  def transaction(*args); end
  def uniq; end
  def writer(records); end

  private

  def _create_record(attributes, raise = T.unsafe(nil), &block); end
  def callback(method, record); end
  def callbacks_for(callback_name); end
  def concat_records(records, raise = T.unsafe(nil)); end
  def create_scope; end
  def delete_or_destroy(records, method); end
  def delete_records(records, method); end
  def fetch_first_nth_or_last_using_find?(args); end
  def find_by_scan(*args); end
  def find_target; end
  def first_nth_or_last(type, *args); end
  def get_records(&block); end
  def include_in_memory?(record); end
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil), &block); end
  def merge_target_lists(persisted, memory); end
  def remove_records(existing_records, records, method); end
  def replace_common_records_in_memory(new_target, original_target); end
  def replace_on_target(record, index, skip_callbacks); end
  def replace_records(new_target, original_target); end
end

class ActiveRecord::Associations::CollectionProxy < ::ActiveRecord::Relation
  def initialize(klass, association); end

  def <<(*records); end
  def ==(other); end
  def _select!(*args, &block); end
  def any?(&block); end
  def append(*records); end
  def arel(*args, &block); end
  def bound_attributes(*args, &block); end
  def build(attributes = T.unsafe(nil), &block); end
  def calculate(operation, column_name); end
  def clear; end
  def concat(*records); end
  def count(column_name = T.unsafe(nil)); end
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def create_with(*args, &block); end
  def create_with!(*args, &block); end
  def create_with_value(*args, &block); end
  def create_with_value=(arg); end
  def delete(*records); end
  def delete_all(dependent = T.unsafe(nil)); end
  def destroy(*records); end
  def destroy_all; end
  def distinct; end
  def distinct!(*args, &block); end
  def distinct_value(*args, &block); end
  def distinct_value=(arg); end
  def eager_load(*args, &block); end
  def eager_load!(*args, &block); end
  def eager_load_values(*args, &block); end
  def eager_load_values=(arg); end
  def empty?; end
  def except(*args, &block); end
  def extending(*args, &block); end
  def extending!(*args, &block); end
  def extending_values(*args, &block); end
  def extending_values=(arg); end
  def extensions(*args, &block); end
  def fifth(*args); end
  def find(*args, &block); end
  def first(*args); end
  def forty_two(*args); end
  def fourth(*args); end
  def from(*args, &block); end
  def from!(*args, &block); end
  def from_clause(*args, &block); end
  def from_clause=(arg); end
  def group(*args, &block); end
  def group!(*args, &block); end
  def group_values(*args, &block); end
  def group_values=(arg); end
  def having(*args, &block); end
  def having!(*args, &block); end
  def having_clause(*args, &block); end
  def having_clause=(arg); end
  def include?(record); end
  def includes(*args, &block); end
  def includes!(*args, &block); end
  def includes_values(*args, &block); end
  def includes_values=(arg); end
  def joins(*args, &block); end
  def joins!(*args, &block); end
  def joins_values(*args, &block); end
  def joins_values=(arg); end
  def last(*args); end
  def left_joins(*args, &block); end
  def left_joins!(*args, &block); end
  def left_joins_values(*args, &block); end
  def left_joins_values=(arg); end
  def left_outer_joins(*args, &block); end
  def left_outer_joins!(*args, &block); end
  def left_outer_joins_values(*args, &block); end
  def left_outer_joins_values=(arg); end
  def length; end
  def limit(*args, &block); end
  def limit!(*args, &block); end
  def limit_value(*args, &block); end
  def limit_value=(arg); end
  def load_target; end
  def loaded?; end
  def lock(*args, &block); end
  def lock!(*args, &block); end
  def lock_value(*args, &block); end
  def lock_value=(arg); end
  def many?(&block); end
  def merge(*args, &block); end
  def merge!(*args, &block); end
  def new(attributes = T.unsafe(nil), &block); end
  def none(*args, &block); end
  def none!(*args, &block); end
  def offset(*args, &block); end
  def offset!(*args, &block); end
  def offset_value(*args, &block); end
  def offset_value=(arg); end
  def only(*args, &block); end
  def or(*args, &block); end
  def or!(*args, &block); end
  def order(*args, &block); end
  def order!(*args, &block); end
  def order_values(*args, &block); end
  def order_values=(arg); end
  def pluck(*column_names); end
  def preload(*args, &block); end
  def preload!(*args, &block); end
  def preload_values(*args, &block); end
  def preload_values=(arg); end
  def prepend(*args); end
  def proxy_association; end
  def push(*records); end
  def readonly(*args, &block); end
  def readonly!(*args, &block); end
  def readonly_value(*args, &block); end
  def readonly_value=(arg); end
  def records; end
  def references(*args, &block); end
  def references!(*args, &block); end
  def references_values(*args, &block); end
  def references_values=(arg); end
  def reload; end
  def reorder(*args, &block); end
  def reorder!(*args, &block); end
  def reordering_value(*args, &block); end
  def reordering_value=(arg); end
  def replace(other_array); end
  def reset; end
  def reset_scope; end
  def reverse_order(*args, &block); end
  def reverse_order!(*args, &block); end
  def reverse_order_value(*args, &block); end
  def reverse_order_value=(arg); end
  def rewhere(*args, &block); end
  def scope; end
  def scoping(*args, &block); end
  def second(*args); end
  def second_to_last(*args); end
  def select(*fields, &block); end
  def select_values(*args, &block); end
  def select_values=(arg); end
  def size; end
  def spawn(*args, &block); end
  def take(n = T.unsafe(nil)); end
  def target; end
  def third(*args); end
  def third_to_last(*args); end
  def to_a; end
  def to_ary; end
  def uniq; end
  def uniq!(*args, &block); end
  def unscope(*args, &block); end
  def unscope!(*args, &block); end
  def unscope_values(*args, &block); end
  def unscope_values=(arg); end
  def where(*args, &block); end
  def where!(*args, &block); end
  def where_clause(*args, &block); end
  def where_clause=(arg); end

  private

  def exec_queries; end
  def null_scope?; end
end

module ActiveRecord::Associations::ForeignAssociation
  def foreign_key_present?; end
end

class ActiveRecord::Associations::HasManyAssociation < ::ActiveRecord::Associations::CollectionAssociation
  include ::ActiveRecord::Associations::ForeignAssociation

  def empty?; end
  def handle_dependency; end
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  def _create_record(attributes, *_arg1); end
  def concat_records(records, *_arg1); end
  def count_records; end
  def delete_count(method, scope); end
  def delete_or_nullify_all_records(method); end
  def delete_records(records, method); end
  def update_counter(difference, reflection = T.unsafe(nil)); end
  def update_counter_if_success(saved_successfully, difference); end
  def update_counter_in_memory(difference, reflection = T.unsafe(nil)); end
end

class ActiveRecord::Associations::HasManyThroughAssociation < ::ActiveRecord::Associations::HasManyAssociation
  include ::ActiveRecord::Associations::ThroughAssociation

  def initialize(owner, reflection); end

  def concat(*records); end
  def concat_records(records); end
  def insert_record(record, validate = T.unsafe(nil), raise = T.unsafe(nil)); end

  private

  def build_record(attributes); end
  def build_through_record(record); end
  def delete_or_nullify_all_records(method); end
  def delete_records(records, method); end
  def delete_through_records(records); end
  def find_target; end
  def invertible_for?(record); end
  def options_for_through_record; end
  def save_through_record(record); end
  def target_reflection_has_associated_record?; end
  def through_association; end
  def through_records_for(record); end
  def through_scope_attributes; end
  def update_through_counter?(method); end
end

class ActiveRecord::Associations::HasOneAssociation < ::ActiveRecord::Associations::SingularAssociation
  include ::ActiveRecord::Associations::ForeignAssociation

  def delete(method = T.unsafe(nil)); end
  def handle_dependency; end
  def replace(record, save = T.unsafe(nil)); end

  private

  def nullify_owner_attributes(record); end
  def remove_target!(method); end
  def set_new_record(record); end
  def transaction_if(value); end
end

class ActiveRecord::Associations::HasOneThroughAssociation < ::ActiveRecord::Associations::HasOneAssociation
  include ::ActiveRecord::Associations::ThroughAssociation

  def replace(record); end

  private

  def create_through_record(record); end
end

class ActiveRecord::Associations::JoinDependency
  def initialize(base, associations, joins); end

  def alias_tracker; end
  def aliases; end
  def base_klass; end
  def instantiate(result_set, aliases); end
  def join_constraints(outer_joins, join_type); end
  def join_root; end
  def reflections; end

  private

  def build(associations, base_klass); end
  def construct(ar_parent, parent, row, rs, seen, model_cache, aliases); end
  def construct_model(record, node, row, model_cache, id, aliases); end
  def construct_tables!(parent, node); end
  def find_reflection(klass, name); end
  def make_constraints(parent, child, tables, join_type); end
  def make_inner_joins(parent, child); end
  def make_left_outer_joins(parent, child); end
  def make_outer_joins(parent, child); end
  def table_alias_for(reflection, parent, join); end
  def table_aliases_for(parent, node); end
  def walk(left, right); end

  class << self
    def make_tree(associations); end
    def walk_tree(associations, hash); end
  end
end

class ActiveRecord::Associations::JoinDependency::Aliases
  def initialize(tables); end

  def column_alias(node, column); end
  def column_aliases(node); end
  def columns; end
end

class ActiveRecord::Associations::JoinDependency::Aliases::Column < ::Struct
  def alias; end
  def alias=(_); end
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Associations::JoinDependency::Aliases::Table < ::Struct
  def column_aliases; end
  def table; end
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation < ::ActiveRecord::Associations::JoinDependency::JoinPart
  def initialize(reflection, children); end

  def aliased_table_name; end
  def build_constraint(klass, table, key, foreign_table, foreign_key); end
  def join_constraints(foreign_table, foreign_klass, node, join_type, tables, scope_chain, chain); end
  def match?(other); end
  def reflection; end
  def table; end
  def tables; end
  def tables=(_arg0); end
end

class ActiveRecord::Associations::JoinDependency::JoinAssociation::JoinInformation < ::Struct
  def binds; end
  def binds=(_); end
  def joins; end
  def joins=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Associations::JoinDependency::JoinBase < ::ActiveRecord::Associations::JoinDependency::JoinPart
  def aliased_table_name; end
  def match?(other); end
  def table; end
end

class ActiveRecord::Associations::JoinDependency::JoinPart
  include ::Enumerable

  def initialize(base_klass, children); end

  def aliased_table_name; end
  def base_klass; end
  def children; end
  def column_names(*args, &block); end
  def each(&block); end
  def extract_record(row, column_names_with_alias); end
  def instantiate(row, aliases, &block); end
  def match?(other); end
  def name; end
  def primary_key(*args, &block); end
  def table; end
  def table_name(*args, &block); end
end

class ActiveRecord::Associations::Preloader
  extend ::ActiveSupport::Autoload

  def preload(records, associations, preload_scope = T.unsafe(nil)); end

  private

  def grouped_records(association, records); end
  def preloader_for(reflection, owners, rhs_klass); end
  def preloaders_for_hash(association, records, scope); end
  def preloaders_for_one(association, records, scope); end
  def preloaders_on(association, records, scope); end
end

class ActiveRecord::Associations::Preloader::AlreadyLoaded
  def initialize(klass, owners, reflection, preload_scope); end

  def owners; end
  def preloaded_records; end
  def reflection; end
  def run(preloader); end
end

class ActiveRecord::Associations::Preloader::Association
  def initialize(klass, owners, reflection, preload_scope); end

  def association_key; end
  def association_key_name; end
  def klass; end
  def model; end
  def options; end
  def owner_key_name; end
  def owners; end
  def preload(preloader); end
  def preload_scope; end
  def preloaded_records; end
  def query_scope(ids); end
  def records_for(ids); end
  def reflection; end
  def run(preloader); end
  def scope; end
  def table; end

  private

  def associated_records_by_owner(preloader); end
  def association_key_type; end
  def build_scope; end
  def convert_key(key); end
  def key_conversion_required?; end
  def load_records(&block); end
  def owner_key_type; end
  def owner_keys; end
  def owners_by_key; end
  def reflection_scope; end
end

class ActiveRecord::Associations::Preloader::BelongsTo < ::ActiveRecord::Associations::Preloader::SingularAssociation
  def association_key_name; end
  def owner_key_name; end
end

class ActiveRecord::Associations::Preloader::CollectionAssociation < ::ActiveRecord::Associations::Preloader::Association
  private

  def preload(preloader); end
end

class ActiveRecord::Associations::Preloader::HasMany < ::ActiveRecord::Associations::Preloader::CollectionAssociation
  def association_key_name; end
  def owner_key_name; end
end

class ActiveRecord::Associations::Preloader::HasManyThrough < ::ActiveRecord::Associations::Preloader::CollectionAssociation
  include ::ActiveRecord::Associations::Preloader::ThroughAssociation

  def associated_records_by_owner(preloader); end
end

class ActiveRecord::Associations::Preloader::HasOne < ::ActiveRecord::Associations::Preloader::SingularAssociation
  def association_key_name; end
  def owner_key_name; end
end

class ActiveRecord::Associations::Preloader::HasOneThrough < ::ActiveRecord::Associations::Preloader::SingularAssociation
  include ::ActiveRecord::Associations::Preloader::ThroughAssociation
end

ActiveRecord::Associations::Preloader::NULL_RELATION = T.let(T.unsafe(nil), T.untyped)

class ActiveRecord::Associations::Preloader::NullPreloader
  class << self
    def new(klass, owners, reflection, preload_scope); end
    def owners; end
    def preloaded_records; end
    def run(preloader); end
  end
end

class ActiveRecord::Associations::Preloader::SingularAssociation < ::ActiveRecord::Associations::Preloader::Association
  private

  def preload(preloader); end
end

module ActiveRecord::Associations::Preloader::ThroughAssociation
  def associated_records_by_owner(preloader); end
  def source_reflection; end
  def through_reflection; end

  private

  def id_to_index_map(ids); end
  def reset_association(owners, association_name); end
  def target_records_from_association(association); end
  def through_scope; end
end

class ActiveRecord::Associations::SingularAssociation < ::ActiveRecord::Associations::Association
  def build(attributes = T.unsafe(nil)); end
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def force_reload_reader; end
  def reader(force_reload = T.unsafe(nil)); end
  def writer(record); end

  private

  def _create_record(attributes, raise_error = T.unsafe(nil)); end
  def create_scope; end
  def find_target; end
  def get_records; end
  def replace(record); end
  def set_new_record(record); end
end

module ActiveRecord::Associations::ThroughAssociation
  def source_reflection(*args, &block); end
  def through_reflection(*args, &block); end

  protected

  def target_scope; end

  private

  def build_record(attributes); end
  def construct_join_attributes(*records); end
  def ensure_mutable; end
  def ensure_not_nested; end
  def foreign_key_present?; end
  def stale_state; end
end

class ActiveRecord::Attribute
  def initialize(name, value_before_type_cast, type, original_attribute = T.unsafe(nil)); end

  def ==(other); end
  def came_from_user?; end
  def changed?; end
  def changed_in_place?; end
  def eql?(other); end
  def forgetting_assignment; end
  def has_been_read?; end
  def hash; end
  def initialized?; end
  def name; end
  def original_value; end
  def type; end
  def type_cast(*_arg0); end
  def value; end
  def value_before_type_cast; end
  def value_for_database; end
  def with_cast_value(value); end
  def with_type(type); end
  def with_value_from_database(value); end
  def with_value_from_user(value); end

  protected

  def _original_value_for_database; end
  def assigned?; end
  def changed_from_assignment?; end
  def original_attribute; end
  def original_value_for_database; end

  private

  def initialize_dup(other); end

  class << self
    def from_database(name, value, type); end
    def from_user(name, value, type, original_attribute = T.unsafe(nil)); end
    def null(name); end
    def uninitialized(name, type); end
    def with_cast_value(name, value, type); end
  end
end

class ActiveRecord::Attribute::FromDatabase < ::ActiveRecord::Attribute
  def _original_value_for_database; end
  def type_cast(value); end
end

class ActiveRecord::Attribute::FromUser < ::ActiveRecord::Attribute
  def came_from_user?; end
  def type_cast(value); end
end

class ActiveRecord::Attribute::Null < ::ActiveRecord::Attribute
  def initialize(name); end

  def type_cast(*_arg0); end
  def with_type(type); end
  def with_value_from_database(value); end
  def with_value_from_user(value); end
end

class ActiveRecord::Attribute::Uninitialized < ::ActiveRecord::Attribute
  def initialize(name, type); end

  def initialized?; end
  def original_value; end
  def value; end
  def value_for_database; end
end

ActiveRecord::Attribute::Uninitialized::UNINITIALIZED_ORIGINAL_VALUE = T.let(T.unsafe(nil), Object)

class ActiveRecord::Attribute::UserProvidedDefault < ::ActiveRecord::Attribute::FromUser
  def initialize(name, value, type, database_default); end

  def value_before_type_cast; end
  def with_type(type); end

  protected

  def user_provided_value; end
end

class ActiveRecord::Attribute::WithCastValue < ::ActiveRecord::Attribute
  def changed_in_place?; end
  def type_cast(value); end
end

module ActiveRecord::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  extend ::ActiveSupport::Concern

  def attributes=(attributes); end

  private

  def _assign_attributes(attributes); end
  def assign_multiparameter_attributes(pairs); end
  def assign_nested_parameter_attributes(pairs); end
  def execute_callstack_for_multiparameter_attributes(callstack); end
  def extract_callstack_for_multiparameter_attributes(pairs); end
  def find_parameter_position(multiparameter_name); end
  def type_cast_attribute_value(multiparameter_name, value); end
end

class ActiveRecord::AttributeAssignmentError < ::ActiveRecord::ActiveRecordError
  def initialize(message = T.unsafe(nil), exception = T.unsafe(nil), attribute = T.unsafe(nil)); end

  def attribute; end
  def exception; end
end

module ActiveRecord::AttributeDecorators
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeDecorators::ClassMethods
end

module ActiveRecord::AttributeDecorators::ClassMethods
  def decorate_attribute_type(column_name, decorator_name, &block); end
  def decorate_matching_attribute_types(matcher, decorator_name, &block); end

  private

  def load_schema!; end
end

class ActiveRecord::AttributeDecorators::TypeDecorator
  def initialize(decorations = T.unsafe(nil)); end

  def apply(name, type); end
  def clear(*args, &block); end
  def merge(*args); end

  private

  def decorators_for(name, type); end
  def matching(name, type); end
end

module ActiveRecord::AttributeMethods
  include ::ActiveRecord::AttributeMethods::Serialization
  extend ::ActiveSupport::Autoload
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::ClassMethods

  def [](attr_name); end
  def []=(attr_name, value); end
  def accessed_fields; end
  def attribute_for_inspect(attr_name); end
  def attribute_names; end
  def attribute_present?(attribute); end
  def attributes; end
  def has_attribute?(attr_name); end
  def respond_to?(name, include_private = T.unsafe(nil)); end

  protected

  def arel_attributes_with_values_for_create(attribute_names); end
  def arel_attributes_with_values_for_update(attribute_names); end
  def attribute_method?(attr_name); end
  def clone_attribute_value(reader_method, attribute_name); end

  private

  def arel_attributes_with_values(attribute_names); end
  def attributes_for_create(attribute_names); end
  def attributes_for_update(attribute_names); end
  def pk_attribute?(name); end
  def readonly_attribute?(name); end
  def typecasted_attribute_value(name); end
end

module ActiveRecord::AttributeMethods::AttrNames
  class << self
    def set_name_cache(name, value); end
  end
end

ActiveRecord::AttributeMethods::BLACKLISTED_CLASS_METHODS = T.let(T.unsafe(nil), Array)

module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend ::ActiveSupport::Concern

  def attributes_before_type_cast; end
  def read_attribute_before_type_cast(attr_name); end

  private

  def attribute_before_type_cast(attribute_name); end
  def attribute_came_from_user?(attribute_name); end
end

module ActiveRecord::AttributeMethods::ClassMethods
  def attribute_method?(attribute); end
  def attribute_names; end
  def class_method_defined_within?(name, klass, superklass = T.unsafe(nil)); end
  def column_for_attribute(name); end
  def dangerous_attribute_method?(name); end
  def dangerous_class_method?(method_name); end
  def define_attribute_methods; end
  def has_attribute?(attr_name); end
  def inherited(child_class); end
  def initialize_generated_modules; end
  def instance_method_already_implemented?(method_name); end
  def method_defined_within?(name, klass, superklass = T.unsafe(nil)); end
  def undefine_attribute_methods; end
end

module ActiveRecord::AttributeMethods::Dirty
  extend ::ActiveSupport::Concern
  include ::ActiveModel::AttributeMethods
  include ::ActiveModel::Dirty

  def attribute_changed_in_place?(attr_name); end
  def changed_attributes; end
  def changes; end
  def changes_applied; end
  def clear_attribute_changes(attr_names); end
  def clear_changes_information; end
  def previous_changes; end
  def raw_write_attribute(attr_name, *_arg1); end
  def reload(*_arg0); end
  def save(*_arg0); end
  def save!(*_arg0); end

  private

  def _create_record(*_arg0); end
  def _update_record(*_arg0); end
  def cache_changed_attributes; end
  def changes_include?(attr_name); end
  def clear_attribute_change(attr_name); end
  def clear_changed_attributes_cache; end
  def initialize_dup(other); end
  def keys_for_partial_write; end
  def mutation_tracker; end
  def previous_mutation_tracker; end
  def store_original_attributes; end
end

class ActiveRecord::AttributeMethods::GeneratedAttributeMethods < ::Module; end

module ActiveRecord::AttributeMethods::PrimaryKey
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods

  def id; end
  def id=(value); end
  def id?; end
  def id_before_type_cast; end
  def id_was; end
  def to_key; end

  protected

  def attribute_method?(attr_name); end
end

module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  def dangerous_attribute_method?(method_name); end
  def define_method_attribute(attr_name); end
  def get_primary_key(base_name); end
  def primary_key; end
  def primary_key=(value); end
  def quoted_primary_key; end
  def reset_primary_key; end

  private

  def suppress_composite_primary_key(pk); end
end

ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods::ID_ATTRIBUTE_METHODS = T.let(T.unsafe(nil), Set)

module ActiveRecord::AttributeMethods::Query
  extend ::ActiveSupport::Concern

  def query_attribute(attr_name); end

  private

  def attribute?(attribute_name); end
end

module ActiveRecord::AttributeMethods::Read
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Read::ClassMethods

  def _read_attribute(attr_name); end
  def read_attribute(attr_name, &block); end

  private

  def attribute(attr_name); end
end

module ActiveRecord::AttributeMethods::Read::ClassMethods
  protected

  def define_method_attribute(name); end
end

module ActiveRecord::AttributeMethods::Serialization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
end

module ActiveRecord::AttributeMethods::Serialization::ClassMethods
  def serialize(attr_name, class_name_or_coder = T.unsafe(nil)); end
end

module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
end

module ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  private

  def create_time_zone_conversion_attribute?(name, cast_type); end
  def inherited(subclass); end
end

class ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter
  def cast(value); end
  def deserialize(value); end

  private

  def convert_time_to_time_zone(value); end
  def map_avoiding_infinite_recursion(value); end
  def set_time_zone_without_conversion(value); end
end

module ActiveRecord::AttributeMethods::Write
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AttributeMethods::Write::ClassMethods

  def raw_write_attribute(attr_name, value); end
  def write_attribute(attr_name, value); end

  private

  def attribute=(attribute_name, value); end
  def write_attribute_with_type_cast(attr_name, value, should_type_cast); end
end

module ActiveRecord::AttributeMethods::Write::ClassMethods
  protected

  def define_method_attribute=(name); end
end

class ActiveRecord::AttributeMutationTracker
  def initialize(attributes); end

  def changed?(attr_name); end
  def changed_in_place?(attr_name); end
  def changed_values; end
  def changes; end
  def forget_change(attr_name); end

  protected

  def attributes; end

  private

  def attr_names; end
end

class ActiveRecord::AttributeSet
  def initialize(attributes); end

  def ==(other); end
  def [](name); end
  def []=(name, value); end
  def accessed; end
  def deep_dup; end
  def except(*args, &block); end
  def fetch(*args, &block); end
  def fetch_value(name); end
  def freeze; end
  def key?(name); end
  def keys; end
  def map(&block); end
  def reset(key); end
  def to_h; end
  def to_hash; end
  def values_before_type_cast; end
  def write_cast_value(name, value); end
  def write_from_database(name, value); end
  def write_from_user(name, value); end

  protected

  def attributes; end

  private

  def initialize_clone(_); end
  def initialize_dup(_); end
  def initialized_attributes; end
end

class ActiveRecord::AttributeSet::Builder
  def initialize(types, default_attributes = T.unsafe(nil)); end

  def build_from_database(values = T.unsafe(nil), additional_types = T.unsafe(nil)); end
  def default_attributes; end
  def types; end
end

module ActiveRecord::Attributes
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Attributes::ClassMethods
end

module ActiveRecord::Attributes::ClassMethods
  def attribute(name, cast_type, **options); end
  def define_attribute(name, cast_type, default: T.unsafe(nil), user_provided_default: T.unsafe(nil)); end
  def load_schema!; end

  private

  def define_default_attribute(name, value, type, from_user:); end
end

ActiveRecord::Attributes::ClassMethods::NO_DEFAULT_PROVIDED = T.let(T.unsafe(nil), Object)

module ActiveRecord::AutosaveAssociation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::AutosaveAssociation::ClassMethods

  def changed_for_autosave?; end
  def destroyed_by_association; end
  def destroyed_by_association=(reflection); end
  def mark_for_destruction; end
  def marked_for_destruction?; end
  def reload(options = T.unsafe(nil)); end

  private

  def _ensure_no_duplicate_errors; end
  def associated_records_to_validate_or_save(association, new_record, autosave); end
  def association_valid?(reflection, record, index = T.unsafe(nil)); end
  def before_save_collection_association; end
  def nested_records_changed_for_autosave?; end
  def normalize_reflection_attribute(indexed_attribute, reflection, index, attribute); end
  def record_changed?(reflection, record, key); end
  def save_belongs_to_association(reflection); end
  def save_collection_association(reflection); end
  def save_has_one_association(reflection); end
  def validate_collection_association(reflection); end
  def validate_single_association(reflection); end
end

module ActiveRecord::AutosaveAssociation::AssociationBuilderExtension
  class << self
    def build(model, reflection); end
    def valid_options; end
  end
end

module ActiveRecord::AutosaveAssociation::ClassMethods
  private

  def add_autosave_association_callbacks(reflection); end
  def define_autosave_validation_callbacks(reflection); end
  def define_non_cyclic_method(name, &block); end
end

class ActiveRecord::Base
  extend ::ActiveRecord::Suppressor::ClassMethods
  include ::ActiveRecord::Persistence
  include ::ActiveRecord::ReadonlyAttributes
  include ::ActiveRecord::ModelSchema
  include ::ActiveRecord::Inheritance
  include ::ActiveRecord::Scoping
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named
  include ::ActiveRecord::Sanitization
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveRecord::AttributeAssignment
  include ::ActiveModel::Conversion
  include ::ActiveRecord::Integration
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveRecord::Validations
  include ::ActiveRecord::CounterCache
  include ::ActiveRecord::Attributes
  include ::ActiveRecord::AttributeDecorators
  include ::ActiveRecord::Locking::Optimistic
  include ::ActiveRecord::Locking::Pessimistic
  include ::ActiveModel::AttributeMethods
  include ::ActiveRecord::AttributeMethods
  include ::ActiveRecord::Base::GeneratedAssociationMethods
  include ::ActiveRecord::AttributeMethods::Read
  include ::ActiveRecord::AttributeMethods::Write
  include ::ActiveRecord::AttributeMethods::BeforeTypeCast
  include ::ActiveRecord::AttributeMethods::Query
  include ::ActiveRecord::AttributeMethods::PrimaryKey
  include ::ActiveRecord::AttributeMethods::TimeZoneConversion
  include ::ActiveModel::Dirty
  include ::ActiveRecord::AttributeMethods::Dirty
  include ::ActiveRecord::AttributeMethods::Serialization
  include ::ActiveRecord::Callbacks
  include ::ActiveModel::Validations::Callbacks
  include ::ActiveRecord::Timestamp
  include ::ActiveRecord::Associations
  include ::ActiveModel::SecurePassword
  include ::ActiveRecord::AutosaveAssociation
  include ::ActiveRecord::NestedAttributes
  include ::ActiveRecord::Aggregations
  include ::ActiveRecord::Transactions
  include ::ActiveRecord::TouchLater
  include ::ActiveRecord::NoTouching
  include ::ActiveRecord::Reflection
  include ::ActiveModel::Serialization
  include ::ActiveModel::Serializers::JSON
  include ::ActiveRecord::Serialization
  include ::ActiveRecord::Store
  include ::ActiveRecord::SecureToken
  include ::ActiveRecord::Suppressor
  extend ::ActiveModel::Naming
  extend ::ActiveSupport::Benchmarkable
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveRecord::ConnectionHandling
  extend ::ActiveRecord::QueryCache::ClassMethods
  extend ::ActiveRecord::Querying
  extend ::ActiveModel::Translation
  extend ::ActiveRecord::Translation
  extend ::ActiveRecord::DynamicMatchers
  extend ::ActiveRecord::Explain
  extend ::ActiveRecord::Enum
  extend ::ActiveRecord::Delegation::DelegateCache
  extend ::ActiveRecord::CollectionCacheKey
  extend ::ActiveRecord::Core::ClassMethods
  extend ::ActiveRecord::Persistence::ClassMethods
  extend ::ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ::ActiveRecord::ModelSchema::ClassMethods
  extend ::ActiveRecord::Inheritance::ClassMethods
  extend ::ActiveRecord::Scoping::ClassMethods
  extend ::ActiveRecord::Scoping::Default::ClassMethods
  extend ::ActiveRecord::Scoping::Named::ClassMethods
  extend ::ActiveRecord::Sanitization::ClassMethods
  extend ::ActiveModel::Conversion::ClassMethods
  extend ::ActiveRecord::Integration::ClassMethods
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveRecord::Validations::ClassMethods
  extend ::ActiveRecord::CounterCache::ClassMethods
  extend ::ActiveRecord::Attributes::ClassMethods
  extend ::ActiveRecord::AttributeDecorators::ClassMethods
  extend ::ActiveRecord::Locking::Optimistic::ClassMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ::ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ::ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ::ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ::ActiveRecord::Callbacks::ClassMethods
  extend ::ActiveModel::Validations::Callbacks::ClassMethods
  extend ::ActiveRecord::Associations::ClassMethods
  extend ::ActiveModel::SecurePassword::ClassMethods
  extend ::ActiveRecord::AutosaveAssociation::ClassMethods
  extend ::ActiveRecord::NestedAttributes::ClassMethods
  extend ::ActiveRecord::Aggregations::ClassMethods
  extend ::ActiveRecord::Transactions::ClassMethods
  extend ::ActiveRecord::NoTouching::ClassMethods
  extend ::ActiveRecord::Reflection::ClassMethods
  extend ::ActiveRecord::Store::ClassMethods
  extend ::ActiveRecord::SecureToken::ClassMethods
  include ::ActiveRecord::Core

  def _before_commit_callbacks; end
  def _before_commit_callbacks?; end
  def _before_commit_without_transaction_enrollment_callbacks; end
  def _before_commit_without_transaction_enrollment_callbacks?; end
  def _commit_callbacks; end
  def _commit_callbacks?; end
  def _commit_without_transaction_enrollment_callbacks; end
  def _commit_without_transaction_enrollment_callbacks?; end
  def _create_callbacks; end
  def _create_callbacks?; end
  def _destroy_callbacks; end
  def _destroy_callbacks?; end
  def _find_callbacks; end
  def _find_callbacks?; end
  def _initialize_callbacks; end
  def _initialize_callbacks?; end
  def _reflections; end
  def _reflections?; end
  def _rollback_callbacks; end
  def _rollback_callbacks?; end
  def _rollback_without_transaction_enrollment_callbacks; end
  def _rollback_without_transaction_enrollment_callbacks?; end
  def _run_before_commit_callbacks(&block); end
  def _run_before_commit_without_transaction_enrollment_callbacks(&block); end
  def _run_commit_callbacks(&block); end
  def _run_commit_without_transaction_enrollment_callbacks(&block); end
  def _run_create_callbacks(&block); end
  def _run_destroy_callbacks(&block); end
  def _run_find_callbacks(&block); end
  def _run_initialize_callbacks(&block); end
  def _run_rollback_callbacks(&block); end
  def _run_rollback_without_transaction_enrollment_callbacks(&block); end
  def _run_save_callbacks(&block); end
  def _run_touch_callbacks(&block); end
  def _run_update_callbacks(&block); end
  def _run_validate_callbacks(&block); end
  def _run_validation_callbacks(&block); end
  def _save_callbacks; end
  def _save_callbacks?; end
  def _touch_callbacks; end
  def _touch_callbacks?; end
  def _update_callbacks; end
  def _update_callbacks?; end
  def _validate_callbacks; end
  def _validate_callbacks?; end
  def _validation_callbacks; end
  def _validation_callbacks?; end
  def _validators; end
  def _validators?; end
  def aggregate_reflections; end
  def aggregate_reflections?; end
  def attribute_aliases; end
  def attribute_aliases?; end
  def attribute_method_matchers; end
  def attribute_method_matchers?; end
  def cache_timestamp_format; end
  def cache_timestamp_format?; end
  def column_for_attribute(*args, &block); end
  def default_connection_handler; end
  def default_connection_handler?; end
  def default_scope_override; end
  def default_scopes; end
  def default_timezone; end
  def defined_enums; end
  def defined_enums?; end
  def dump_schema_after_migration; end
  def dump_schemas; end
  def error_on_ignored_order_or_limit; end
  def include_root_in_json; end
  def include_root_in_json?; end
  def index_nested_attribute_errors; end
  def lock_optimistically; end
  def lock_optimistically?; end
  def logger; end
  def model_name(*args, &block); end
  def nested_attributes_options; end
  def nested_attributes_options?; end
  def partial_writes; end
  def partial_writes?; end
  def pluralize_table_names; end
  def pluralize_table_names?; end
  def primary_key_prefix_type; end
  def record_timestamps; end
  def record_timestamps=(_arg0); end
  def record_timestamps?; end
  def schema_format; end
  def skip_time_zone_conversion_for_attributes; end
  def skip_time_zone_conversion_for_attributes?; end
  def store_full_sti_class; end
  def store_full_sti_class?; end
  def table_name_prefix; end
  def table_name_prefix?; end
  def table_name_suffix; end
  def table_name_suffix?; end
  def time_zone_aware_attributes; end
  def time_zone_aware_types; end
  def time_zone_aware_types?; end
  def timestamped_migrations; end
  def type_for_attribute(*args, &block); end
  def validation_context; end
  def warn_on_records_fetched_greater_than; end

  private

  def validation_context=(_arg0); end

  class << self
    def _attr_readonly; end
    def _attr_readonly=(val); end
    def _attr_readonly?; end
    def _before_commit_callbacks; end
    def _before_commit_callbacks=(val); end
    def _before_commit_callbacks?; end
    def _before_commit_without_transaction_enrollment_callbacks; end
    def _before_commit_without_transaction_enrollment_callbacks=(val); end
    def _before_commit_without_transaction_enrollment_callbacks?; end
    def _commit_callbacks; end
    def _commit_callbacks=(val); end
    def _commit_callbacks?; end
    def _commit_without_transaction_enrollment_callbacks; end
    def _commit_without_transaction_enrollment_callbacks=(val); end
    def _commit_without_transaction_enrollment_callbacks?; end
    def _create_callbacks; end
    def _create_callbacks=(val); end
    def _create_callbacks?; end
    def _destroy_callbacks; end
    def _destroy_callbacks=(val); end
    def _destroy_callbacks?; end
    def _find_callbacks; end
    def _find_callbacks=(val); end
    def _find_callbacks?; end
    def _initialize_callbacks; end
    def _initialize_callbacks=(val); end
    def _initialize_callbacks?; end
    def _reflections; end
    def _reflections=(val); end
    def _reflections?; end
    def _rollback_callbacks; end
    def _rollback_callbacks=(val); end
    def _rollback_callbacks?; end
    def _rollback_without_transaction_enrollment_callbacks; end
    def _rollback_without_transaction_enrollment_callbacks=(val); end
    def _rollback_without_transaction_enrollment_callbacks?; end
    def _save_callbacks; end
    def _save_callbacks=(val); end
    def _save_callbacks?; end
    def _touch_callbacks; end
    def _touch_callbacks=(val); end
    def _touch_callbacks?; end
    def _update_callbacks; end
    def _update_callbacks=(val); end
    def _update_callbacks?; end
    def _validate_callbacks; end
    def _validate_callbacks=(val); end
    def _validate_callbacks?; end
    def _validation_callbacks; end
    def _validation_callbacks=(val); end
    def _validation_callbacks?; end
    def _validators; end
    def _validators=(val); end
    def _validators?; end
    def after_create(*args, &block); end
    def after_destroy(*args, &block); end
    def after_find(*args, &block); end
    def after_initialize(*args, &block); end
    def after_save(*args, &block); end
    def after_touch(*args, &block); end
    def after_update(*args, &block); end
    def aggregate_reflections; end
    def aggregate_reflections=(val); end
    def aggregate_reflections?; end
    def around_create(*args, &block); end
    def around_destroy(*args, &block); end
    def around_save(*args, &block); end
    def around_update(*args, &block); end
    def attribute_aliases; end
    def attribute_aliases=(val); end
    def attribute_aliases?; end
    def attribute_method_matchers; end
    def attribute_method_matchers=(val); end
    def attribute_method_matchers?; end
    def attribute_type_decorations; end
    def attribute_type_decorations=(val); end
    def attribute_type_decorations?; end
    def attributes_to_define_after_schema_loads; end
    def attributes_to_define_after_schema_loads=(val); end
    def attributes_to_define_after_schema_loads?; end
    def before_create(*args, &block); end
    def before_destroy(*args, &block); end
    def before_save(*args, &block); end
    def before_update(*args, &block); end
    def belongs_to_required_by_default; end
    def belongs_to_required_by_default=(obj); end
    def cache_timestamp_format; end
    def cache_timestamp_format=(val); end
    def cache_timestamp_format?; end
    def configurations; end
    def configurations=(config); end
    def connection_handler; end
    def connection_handler=(handler); end
    def default_connection_handler; end
    def default_connection_handler=(val); end
    def default_connection_handler?; end
    def default_scope_override; end
    def default_scope_override=(val); end
    def default_scopes; end
    def default_scopes=(val); end
    def default_timezone; end
    def default_timezone=(obj); end
    def defined_enums; end
    def defined_enums=(val); end
    def defined_enums?; end
    def dump_schema_after_migration; end
    def dump_schema_after_migration=(obj); end
    def dump_schemas; end
    def dump_schemas=(obj); end
    def error_on_ignored_order_or_limit; end
    def error_on_ignored_order_or_limit=(obj); end
    def include_root_in_json; end
    def include_root_in_json=(val); end
    def include_root_in_json?; end
    def index_nested_attribute_errors; end
    def index_nested_attribute_errors=(obj); end
    def internal_metadata_table_name; end
    def internal_metadata_table_name=(val); end
    def internal_metadata_table_name?; end
    def local_stored_attributes; end
    def local_stored_attributes=(_arg0); end
    def lock_optimistically; end
    def lock_optimistically=(val); end
    def lock_optimistically?; end
    def logger; end
    def logger=(obj); end
    def maintain_test_schema; end
    def maintain_test_schema=(obj); end
    def nested_attributes_options; end
    def nested_attributes_options=(val); end
    def nested_attributes_options?; end
    def partial_writes; end
    def partial_writes=(val); end
    def partial_writes?; end
    def pluralize_table_names; end
    def pluralize_table_names=(val); end
    def pluralize_table_names?; end
    def primary_key_prefix_type; end
    def primary_key_prefix_type=(obj); end
    def protected_environments; end
    def protected_environments=(val); end
    def protected_environments?; end
    def record_timestamps; end
    def record_timestamps=(val); end
    def record_timestamps?; end
    def schema_format; end
    def schema_format=(obj); end
    def schema_migrations_table_name; end
    def schema_migrations_table_name=(val); end
    def schema_migrations_table_name?; end
    def skip_time_zone_conversion_for_attributes; end
    def skip_time_zone_conversion_for_attributes=(val); end
    def skip_time_zone_conversion_for_attributes?; end
    def store_full_sti_class; end
    def store_full_sti_class=(val); end
    def store_full_sti_class?; end
    def table_name_prefix; end
    def table_name_prefix=(val); end
    def table_name_prefix?; end
    def table_name_suffix; end
    def table_name_suffix=(val); end
    def table_name_suffix?; end
    def time_zone_aware_attributes; end
    def time_zone_aware_attributes=(obj); end
    def time_zone_aware_types; end
    def time_zone_aware_types=(val); end
    def time_zone_aware_types?; end
    def timestamped_migrations; end
    def timestamped_migrations=(obj); end
    def warn_on_records_fetched_greater_than; end
    def warn_on_records_fetched_greater_than=(obj); end
  end
end

module ActiveRecord::Base::GeneratedAssociationMethods; end

module ActiveRecord::Batches
  def find_each(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil)); end
  def find_in_batches(start: T.unsafe(nil), finish: T.unsafe(nil), batch_size: T.unsafe(nil), error_on_ignore: T.unsafe(nil)); end
  def in_batches(of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil), load: T.unsafe(nil), error_on_ignore: T.unsafe(nil)); end

  private

  def act_on_order_or_limit_ignored(error_on_ignore); end
  def apply_limits(relation, start, finish); end
  def batch_order; end
end

class ActiveRecord::Batches::BatchEnumerator
  include ::Enumerable

  def initialize(relation:, of: T.unsafe(nil), start: T.unsafe(nil), finish: T.unsafe(nil)); end

  def delete_all(*args, &block); end
  def destroy_all(*args, &block); end
  def each; end
  def each_record; end
  def update_all(*args, &block); end
end

ActiveRecord::Batches::ORDER_OR_LIMIT_IGNORED_MESSAGE = T.let(T.unsafe(nil), String)

module ActiveRecord::Calculations
  def average(column_name); end
  def calculate(operation, column_name); end
  def count(column_name = T.unsafe(nil)); end
  def ids; end
  def maximum(column_name); end
  def minimum(column_name); end
  def pluck(*column_names); end
  def sum(column_name = T.unsafe(nil), &block); end

  private

  def aggregate_column(column_name); end
  def build_count_subquery(relation, column_name, distinct); end
  def column_alias_for(keys); end
  def execute_grouped_calculation(operation, column_name, distinct); end
  def execute_simple_calculation(operation, column_name, distinct); end
  def has_include?(column_name); end
  def operation_over_aggregate_column(column, operation, distinct); end
  def perform_calculation(operation, column_name); end
  def select_for_count; end
  def type_cast_calculated_value(value, type, operation = T.unsafe(nil)); end
  def type_for(field, &block); end
end

module ActiveRecord::Callbacks
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::Callbacks

  mixes_in_class_methods ::ActiveRecord::Callbacks::ClassMethods

  def destroy; end
  def touch(*_arg0); end

  private

  def _create_record; end
  def _update_record(*_arg0); end
  def create_or_update(*_arg0); end
end

ActiveRecord::Callbacks::CALLBACKS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Callbacks::ClassMethods
  include ::ActiveModel::Callbacks
end

module ActiveRecord::Coders; end

class ActiveRecord::Coders::JSON
  class << self
    def dump(obj); end
    def load(json); end
  end
end

class ActiveRecord::Coders::YAMLColumn
  def initialize(object_class = T.unsafe(nil)); end

  def assert_valid_value(obj); end
  def dump(obj); end
  def load(yaml); end
  def object_class; end
  def object_class=(_arg0); end

  private

  def check_arity_of_constructor; end
end

module ActiveRecord::CollectionCacheKey
  def collection_cache_key(collection = T.unsafe(nil), timestamp_column = T.unsafe(nil)); end
end

class ActiveRecord::ConcurrentMigrationError < ::ActiveRecord::MigrationError
  def initialize(message = T.unsafe(nil)); end
end

ActiveRecord::ConcurrentMigrationError::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)
class ActiveRecord::ConfigurationError < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::ConnectionAdapters
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  extend ::ActiveSupport::DescendantsTracker
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  include ::ActiveRecord::ConnectionAdapters::Quoting
  include ::ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ::ActiveRecord::ConnectionAdapters::QueryCache
  include ::ActiveRecord::ConnectionAdapters::ColumnDumper
  include ::ActiveRecord::ConnectionAdapters::Savepoints
  extend ::ActiveSupport::Callbacks::ClassMethods
  include ::ActiveSupport::Callbacks

  def initialize(connection, logger = T.unsafe(nil), config = T.unsafe(nil)); end

  def _checkin_callbacks; end
  def _checkin_callbacks?; end
  def _checkout_callbacks; end
  def _checkout_callbacks?; end
  def _run_checkin_callbacks(&block); end
  def _run_checkout_callbacks(&block); end
  def active?; end
  def adapter_name; end
  def arel_visitor; end
  def case_insensitive_comparison(table, attribute, column, value); end
  def case_sensitive_comparison(table, attribute, column, value); end
  def clear_cache!; end
  def close; end
  def collector; end
  def column_name_for_operation(operation, node); end
  def combine_bind_parameters(from_clause: T.unsafe(nil), join_clause: T.unsafe(nil), where_clause: T.unsafe(nil), having_clause: T.unsafe(nil), limit: T.unsafe(nil), offset: T.unsafe(nil)); end
  def delete(*_arg0); end
  def disable_extension(name); end
  def disable_referential_integrity; end
  def disconnect!; end
  def enable_extension(name); end
  def expire; end
  def extensions; end
  def get_advisory_lock(lock_id); end
  def in_use?; end
  def index_algorithms; end
  def insert(*_arg0); end
  def lease; end
  def logger; end
  def lookup_cast_type(sql_type); end
  def new_column(name, default, sql_type_metadata, null, table_name, default_function = T.unsafe(nil), collation = T.unsafe(nil)); end
  def owner; end
  def pool; end
  def pool=(_arg0); end
  def prefetch_primary_key?(table_name = T.unsafe(nil)); end
  def prepared_statements; end
  def raw_connection; end
  def reconnect!; end
  def release_advisory_lock(lock_id); end
  def requires_reloading?; end
  def reset!; end
  def rollback_db_transaction(*_arg0); end
  def rollback_to_savepoint(*_arg0); end
  def schema_cache; end
  def schema_cache=(cache); end
  def schema_creation; end
  def steal!; end
  def supports_advisory_locks?; end
  def supports_bulk_alter?; end
  def supports_comments?; end
  def supports_comments_in_create?; end
  def supports_datetime_with_precision?; end
  def supports_ddl_transactions?; end
  def supports_explain?; end
  def supports_expression_index?; end
  def supports_extensions?; end
  def supports_foreign_keys?; end
  def supports_index_sort_order?; end
  def supports_indexes_in_create?; end
  def supports_json?; end
  def supports_migrations?; end
  def supports_multi_insert?; end
  def supports_partial_index?; end
  def supports_primary_key?; end
  def supports_savepoints?; end
  def supports_transaction_isolation?; end
  def supports_views?; end
  def type_map; end
  def unprepared_statement; end
  def update(*_arg0); end
  def valid_type?(type); end
  def verify!(*ignored); end
  def visitor; end
  def visitor=(_arg0); end

  protected

  def column_for(table_name, column_name); end
  def extract_limit(sql_type); end
  def extract_precision(sql_type); end
  def extract_scale(sql_type); end
  def initialize_type_map(m); end
  def log(sql, name = T.unsafe(nil), binds = T.unsafe(nil), type_casted_binds = T.unsafe(nil), statement_name = T.unsafe(nil)); end
  def register_class_with_limit(mapping, key, klass); end
  def register_class_with_precision(mapping, key, klass); end
  def reload_type_map; end
  def translate_exception(exception, message); end
  def translate_exception_class(e, sql); end
  def without_prepared_statement?(binds); end

  private

  def can_perform_case_insensitive_comparison_for?(column); end

  class << self
    def _checkin_callbacks; end
    def _checkin_callbacks=(val); end
    def _checkin_callbacks?; end
    def _checkout_callbacks; end
    def _checkout_callbacks=(val); end
    def _checkout_callbacks?; end
    def type_cast_config_to_boolean(config); end
    def type_cast_config_to_integer(config); end
  end
end

ActiveRecord::ConnectionAdapters::AbstractAdapter::ADAPTER_NAME = T.let(T.unsafe(nil), String)

class ActiveRecord::ConnectionAdapters::AbstractAdapter::BindCollector < ::Arel::Collectors::Bind
  def compile(bvs, conn); end
end

ActiveRecord::ConnectionAdapters::AbstractAdapter::SIMPLE_INT = T.let(T.unsafe(nil), Regexp)

class ActiveRecord::ConnectionAdapters::AbstractAdapter::SQLString < ::Arel::Collectors::SQLString
  def compile(bvs, conn); end
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation
  def initialize(conn); end

  def accept(o); end

  private

  def action_sql(action, dependency); end
  def add_column_options!(sql, options); end
  def add_table_options!(create_sql, options); end
  def column_options(o); end
  def foreign_key_in_create(from_table, to_table, options); end
  def foreign_key_options(*args, &block); end
  def options_include_default?(*args, &block); end
  def quote_column_name(*args, &block); end
  def quote_default_expression(*args, &block); end
  def quote_table_name(*args, &block); end
  def supports_foreign_keys?(*args, &block); end
  def supports_indexes_in_create?(*args, &block); end
  def table_options(o); end
  def type_to_sql(*args, &block); end
  def visit_AddColumnDefinition(o); end
  def visit_AddForeignKey(o); end
  def visit_AlterTable(o); end
  def visit_ColumnDefinition(o); end
  def visit_DropForeignKey(name); end
  def visit_ForeignKeyDefinition(o); end
  def visit_PrimaryKeyDefinition(o); end
  def visit_TableDefinition(o); end
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
  include ::Comparable

  def initialize(version_string); end

  def <=>(version_string); end
end

class ActiveRecord::ConnectionAdapters::AddColumnDefinition < ::Struct; end

class ActiveRecord::ConnectionAdapters::AlterTable
  def initialize(td); end

  def add_column(name, type, options); end
  def add_foreign_key(to_table, options); end
  def adds; end
  def drop_foreign_key(name); end
  def foreign_key_adds; end
  def foreign_key_drops; end
  def name; end
end

class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition < ::Struct; end

class ActiveRecord::ConnectionAdapters::Column
  def initialize(name, default, sql_type_metadata = T.unsafe(nil), null = T.unsafe(nil), table_name = T.unsafe(nil), default_function = T.unsafe(nil), collation = T.unsafe(nil), comment: T.unsafe(nil), **_arg8); end

  def ==(other); end
  def bigint?; end
  def collation; end
  def comment; end
  def default; end
  def default_function; end
  def eql?(other); end
  def has_default?; end
  def hash; end
  def human_name; end
  def limit(*args, &block); end
  def name; end
  def null; end
  def precision(*args, &block); end
  def scale(*args, &block); end
  def sql_type(*args, &block); end
  def sql_type_metadata; end
  def table_name; end
  def type(*args, &block); end

  protected

  def attributes_for_hash; end
end

class ActiveRecord::ConnectionAdapters::ColumnDefinition < ::Struct
  def primary_key?; end
end

module ActiveRecord::ConnectionAdapters::ColumnDumper
  def column_spec(column); end
  def column_spec_for_primary_key(column); end
  def migration_keys; end
  def prepare_column_options(column); end

  private

  def default_primary_key?(column); end
  def schema_collation(column); end
  def schema_default(column); end
  def schema_expression(column); end
  def schema_limit(column); end
  def schema_precision(column); end
  def schema_scale(column); end
  def schema_type(column); end
end

module ActiveRecord::ConnectionAdapters::ColumnMethods
  def bigint(*args, **options); end
  def binary(*args, **options); end
  def boolean(*args, **options); end
  def date(*args, **options); end
  def datetime(*args, **options); end
  def decimal(*args, **options); end
  def float(*args, **options); end
  def integer(*args, **options); end
  def numeric(*args, **options); end
  def primary_key(name, type = T.unsafe(nil), **options); end
  def string(*args, **options); end
  def text(*args, **options); end
  def time(*args, **options); end
  def timestamp(*args, **options); end
end

class ActiveRecord::ConnectionAdapters::ConnectionHandler
  def initialize; end

  def active_connections?; end
  def clear_active_connections!; end
  def clear_all_connections!; end
  def clear_reloadable_connections!; end
  def connected?(spec_name); end
  def connection_pool_list; end
  def connection_pools; end
  def establish_connection(spec); end
  def remove_connection(spec_name); end
  def retrieve_connection(spec_name); end
  def retrieve_connection_pool(spec_name); end

  private

  def owner_to_pool; end
  def pool_from_any_process_for(spec_name); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool
  include ::MonitorMixin
  include ::ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration

  def initialize(spec); end

  def active_connection?; end
  def automatic_reconnect; end
  def automatic_reconnect=(_arg0); end
  def checkin(conn); end
  def checkout(checkout_timeout = T.unsafe(nil)); end
  def checkout_timeout; end
  def checkout_timeout=(_arg0); end
  def clear_reloadable_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end
  def clear_reloadable_connections!; end
  def connected?; end
  def connection; end
  def connections; end
  def disconnect(raise_on_acquisition_timeout = T.unsafe(nil)); end
  def disconnect!; end
  def num_waiting_in_queue; end
  def reap; end
  def reaper; end
  def release_connection(owner_thread = T.unsafe(nil)); end
  def remove(conn); end
  def schema_cache; end
  def schema_cache=(_arg0); end
  def size; end
  def spec; end
  def with_connection; end

  private

  def acquire_connection(checkout_timeout); end
  def adopt_connection(conn); end
  def attempt_to_checkout_all_existing_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end
  def bulk_make_new_connections(num_new_conns_needed); end
  def checkout_and_verify(c); end
  def checkout_for_exclusive_access(checkout_timeout); end
  def checkout_new_connection; end
  def connection_cache_key(thread); end
  def new_connection; end
  def release(conn, owner_thread = T.unsafe(nil)); end
  def remove_connection_from_thread_cache(conn, owner_thread = T.unsafe(nil)); end
  def try_to_checkout_new_connection; end
  def with_exclusively_acquired_all_connections(raise_on_acquisition_timeout = T.unsafe(nil)); end
  def with_new_connections_blocked; end
end

module ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
  def with_a_bias_for(thread); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable
  def initialize(lock, other_cond, preferred_thread); end

  def broadcast; end
  def broadcast_on_biased; end
  def signal; end
  def wait(timeout); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue < ::ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  include ::ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue

  private

  def internal_poll(timeout); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  def initialize(lock = T.unsafe(nil)); end

  def add(element); end
  def any_waiting?; end
  def clear; end
  def delete(element); end
  def num_waiting; end
  def poll(timeout = T.unsafe(nil)); end

  private

  def any?; end
  def can_remove_no_wait?; end
  def internal_poll(timeout); end
  def no_wait_poll; end
  def remove; end
  def synchronize(&block); end
  def wait_poll(timeout); end
end

class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper
  def initialize(pool, frequency); end

  def frequency; end
  def pool; end
  def run; end
end

class ActiveRecord::ConnectionAdapters::ConnectionSpecification
  def initialize(name, config, adapter_method); end

  def adapter_method; end
  def config; end
  def name; end

  private

  def initialize_dup(original); end
end

class ActiveRecord::ConnectionAdapters::ConnectionSpecification::ConnectionUrlResolver
  def initialize(url); end

  def to_hash; end

  private

  def database_from_path; end
  def query_hash; end
  def raw_config; end
  def uri; end
  def uri_parser; end
end

class ActiveRecord::ConnectionAdapters::ConnectionSpecification::Resolver
  def initialize(configurations); end

  def configurations; end
  def resolve(config); end
  def resolve_all; end
  def spec(config, name = T.unsafe(nil)); end

  private

  def resolve_connection(spec); end
  def resolve_hash_connection(spec); end
  def resolve_symbol_connection(spec); end
  def resolve_url_connection(url); end
end

module ActiveRecord::ConnectionAdapters::DatabaseLimits
  def allowed_index_name_length; end
  def column_name_length; end
  def columns_per_multicolumn_index; end
  def columns_per_table; end
  def in_clause_length; end
  def index_name_length; end
  def indexes_per_table; end
  def joins_per_query; end
  def sql_query_length; end
  def table_alias_length; end
  def table_name_length; end
end

module ActiveRecord::ConnectionAdapters::DatabaseStatements
  def initialize; end

  def add_transaction_record(record); end
  def begin_db_transaction; end
  def begin_isolated_db_transaction(isolation); end
  def begin_transaction(*args, &block); end
  def cacheable_query(arel); end
  def commit_db_transaction; end
  def commit_transaction(*args, &block); end
  def create(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def current_transaction(*args, &block); end
  def default_sequence_name(table, column); end
  def delete(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def empty_insert_statement_value; end
  def exec_delete(sql, name, binds); end
  def exec_insert(sql, name, binds, pk = T.unsafe(nil), sequence_name = T.unsafe(nil)); end
  def exec_query(sql, name = T.unsafe(nil), binds = T.unsafe(nil), prepare: T.unsafe(nil)); end
  def exec_rollback_db_transaction; end
  def exec_update(sql, name, binds); end
  def execute(sql, name = T.unsafe(nil)); end
  def insert(arel, name = T.unsafe(nil), pk = T.unsafe(nil), id_value = T.unsafe(nil), sequence_name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def insert_fixture(fixture, table_name); end
  def join_to_delete(update, select, key); end
  def join_to_update(update, select, key); end
  def open_transactions(*args, &block); end
  def reset_sequence!(table, column, sequence = T.unsafe(nil)); end
  def reset_transaction; end
  def rollback_db_transaction; end
  def rollback_to_savepoint(name = T.unsafe(nil)); end
  def rollback_transaction(*args, &block); end
  def sanitize_limit(limit); end
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil), preparable: T.unsafe(nil)); end
  def select_one(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_rows(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_value(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_values(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def supports_statement_cache?; end
  def to_sql(arel, binds = T.unsafe(nil)); end
  def transaction(requires_new: T.unsafe(nil), isolation: T.unsafe(nil), joinable: T.unsafe(nil)); end
  def transaction_isolation_levels; end
  def transaction_manager; end
  def transaction_open?; end
  def transaction_state; end
  def truncate(table_name, name = T.unsafe(nil)); end
  def update(arel, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def within_new_transaction(*args, &block); end

  protected

  def binds_from_relation(relation, binds); end
  def last_inserted_id(result); end
  def select(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def select_prepared(sql, name = T.unsafe(nil), binds = T.unsafe(nil)); end
  def sql_for_insert(sql, pk, id_value, sequence_name, binds); end
  def subquery_for(key, select); end
end

module ActiveRecord::ConnectionAdapters::DetermineIfPreparableVisitor
  def accept(*_arg0); end
  def preparable; end
  def visit_Arel_Nodes_In(*_arg0); end
  def visit_Arel_Nodes_SqlLiteral(*_arg0); end
end

class ActiveRecord::ConnectionAdapters::ForeignKeyDefinition < ::Struct
  def column; end
  def custom_primary_key?; end
  def defined_for?(to_table_ord = T.unsafe(nil), to_table: T.unsafe(nil), **options); end
  def name; end
  def on_delete; end
  def on_update; end
  def primary_key; end

  private

  def default_primary_key; end
end

class ActiveRecord::ConnectionAdapters::IndexDefinition < ::Struct; end

class ActiveRecord::ConnectionAdapters::NullColumn < ::ActiveRecord::ConnectionAdapters::Column
  def initialize(name); end
end

class ActiveRecord::ConnectionAdapters::NullTransaction
  def initialize; end

  def add_record(record); end
  def closed?; end
  def joinable?; end
  def open?; end
  def state; end
end

class ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition < ::Struct; end

module ActiveRecord::ConnectionAdapters::QueryCache
  def initialize(*_arg0); end

  def cache; end
  def clear_query_cache; end
  def disable_query_cache!; end
  def enable_query_cache!; end
  def query_cache; end
  def query_cache_enabled; end
  def select_all(arel, name = T.unsafe(nil), binds = T.unsafe(nil), preparable: T.unsafe(nil)); end
  def uncached; end

  private

  def cache_sql(sql, binds); end
  def configure_query_cache!; end
  def locked?(arel); end

  class << self
    def dirties_query_cache(base, *method_names); end
    def included(base); end
  end
end

module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  def initialize(*_arg0); end

  def disable_query_cache!; end
  def enable_query_cache!; end
  def query_cache_enabled; end
end

module ActiveRecord::ConnectionAdapters::Quoting
  def fetch_type_metadata(sql_type); end
  def lookup_cast_type_from_column(column); end
  def prepare_binds_for_database(binds); end
  def quote(value, column = T.unsafe(nil)); end
  def quote_column_name(column_name); end
  def quote_default_expression(value, column); end
  def quote_string(s); end
  def quote_table_name(table_name); end
  def quote_table_name_for_assignment(table, attr); end
  def quoted_date(value); end
  def quoted_false; end
  def quoted_time(value); end
  def quoted_true; end
  def type_cast(value, column = T.unsafe(nil)); end
  def type_cast_from_column(column, value); end
  def type_casted_binds(binds); end
  def unquoted_false; end
  def unquoted_true; end

  private

  def _quote(value); end
  def _type_cast(value); end
  def types_which_need_no_typecasting; end
end

class ActiveRecord::ConnectionAdapters::RealTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  def initialize(connection, options, *args); end

  def commit; end
  def rollback; end
end

class ActiveRecord::ConnectionAdapters::ReferenceDefinition
  def initialize(name, polymorphic: T.unsafe(nil), index: T.unsafe(nil), foreign_key: T.unsafe(nil), type: T.unsafe(nil), **options); end

  def add_to(table); end

  protected

  def foreign_key; end
  def index; end
  def name; end
  def options; end
  def polymorphic; end
  def type; end

  private

  def as_options(value); end
  def column_name; end
  def column_names; end
  def columns; end
  def foreign_key_options; end
  def foreign_table_name; end
  def index_options; end
  def polymorphic_options; end
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction < ::ActiveRecord::ConnectionAdapters::Transaction
  def initialize(connection, savepoint_name, options, *args); end

  def commit; end
  def full_rollback?; end
  def rollback; end
end

module ActiveRecord::ConnectionAdapters::Savepoints
  def create_savepoint(name = T.unsafe(nil)); end
  def current_savepoint_name; end
  def exec_rollback_to_savepoint(name = T.unsafe(nil)); end
  def release_savepoint(name = T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::SchemaCache
  def initialize(conn); end

  def add(table_name); end
  def clear!; end
  def clear_data_source_cache!(name); end
  def columns(table_name); end
  def columns_hash(table_name); end
  def connection; end
  def connection=(_arg0); end
  def data_source_exists?(name); end
  def data_sources(name); end
  def marshal_dump; end
  def marshal_load(array); end
  def primary_keys(table_name); end
  def size; end
  def version; end

  private

  def initialize_dup(other); end
  def prepare_data_sources; end
end

module ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable

  def add_belongs_to(table_name, *args); end
  def add_column(table_name, column_name, type, options = T.unsafe(nil)); end
  def add_foreign_key(from_table, to_table, options = T.unsafe(nil)); end
  def add_index(table_name, column_name, options = T.unsafe(nil)); end
  def add_index_options(table_name, column_name, comment: T.unsafe(nil), **options); end
  def add_reference(table_name, *args); end
  def add_timestamps(table_name, options = T.unsafe(nil)); end
  def assume_migrated_upto_version(version, migrations_paths); end
  def change_column(table_name, column_name, type, options = T.unsafe(nil)); end
  def change_column_comment(table_name, column_name, comment); end
  def change_column_default(table_name, column_name, default_or_changes); end
  def change_column_null(table_name, column_name, null, default = T.unsafe(nil)); end
  def change_table(table_name, options = T.unsafe(nil)); end
  def change_table_comment(table_name, comment); end
  def column_exists?(table_name, column_name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def columns(table_name); end
  def columns_for_distinct(columns, orders); end
  def create_join_table(table_1, table_2, options = T.unsafe(nil)); end
  def create_table(table_name, comment: T.unsafe(nil), **options); end
  def data_source_exists?(name); end
  def data_sources; end
  def drop_join_table(table_1, table_2, options = T.unsafe(nil)); end
  def drop_table(table_name, options = T.unsafe(nil)); end
  def dump_schema_information; end
  def foreign_key_column_for(table_name); end
  def foreign_key_exists?(from_table, options_or_to_table = T.unsafe(nil)); end
  def foreign_key_for(from_table, options_or_to_table = T.unsafe(nil)); end
  def foreign_key_for!(from_table, options_or_to_table = T.unsafe(nil)); end
  def foreign_key_options(from_table, to_table, options); end
  def foreign_keys(table_name); end
  def index_exists?(table_name, column_name, options = T.unsafe(nil)); end
  def index_name(table_name, options); end
  def index_name_exists?(table_name, index_name, default); end
  def initialize_internal_metadata_table; end
  def initialize_schema_migrations_table; end
  def insert_versions_sql(versions); end
  def internal_string_options_for_primary_key; end
  def native_database_types; end
  def options_include_default?(options); end
  def primary_key(table_name); end
  def remove_belongs_to(table_name, ref_name, foreign_key: T.unsafe(nil), polymorphic: T.unsafe(nil), **options); end
  def remove_column(table_name, column_name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def remove_columns(table_name, *column_names); end
  def remove_foreign_key(from_table, options_or_to_table = T.unsafe(nil)); end
  def remove_index(table_name, options = T.unsafe(nil)); end
  def remove_reference(table_name, ref_name, foreign_key: T.unsafe(nil), polymorphic: T.unsafe(nil), **options); end
  def remove_timestamps(table_name, options = T.unsafe(nil)); end
  def rename_column(table_name, column_name, new_column_name); end
  def rename_index(table_name, old_name, new_name); end
  def rename_table(table_name, new_name); end
  def table_alias_for(table_name); end
  def table_comment(table_name); end
  def table_exists?(table_name); end
  def table_options(table_name); end
  def tables(name = T.unsafe(nil)); end
  def type_to_sql(type, limit = T.unsafe(nil), precision = T.unsafe(nil), scale = T.unsafe(nil)); end
  def update_table_definition(table_name, base); end
  def view_exists?(view_name); end
  def views; end

  protected

  def add_index_sort_order(quoted_columns, **options); end
  def add_options_for_index_columns(quoted_columns, **options); end
  def index_name_for_remove(table_name, options = T.unsafe(nil)); end
  def quoted_columns_for_index(column_names, **options); end
  def rename_column_indexes(table_name, column_name, new_column_name); end
  def rename_table_indexes(table_name, new_name); end

  private

  def can_remove_index_by_name?(options); end
  def create_alter_table(name); end
  def create_table_definition(*args); end
  def extract_new_default_value(default_or_changes); end
  def foreign_key_name(table_name, options); end
  def index_column_names(column_names); end
  def index_name_options(column_names); end
  def validate_index_length!(table_name, new_name); end
end

class ActiveRecord::ConnectionAdapters::SqlTypeMetadata
  def initialize(sql_type: T.unsafe(nil), type: T.unsafe(nil), limit: T.unsafe(nil), precision: T.unsafe(nil), scale: T.unsafe(nil)); end

  def ==(other); end
  def eql?(other); end
  def hash; end
  def limit; end
  def precision; end
  def scale; end
  def sql_type; end
  def type; end

  protected

  def attributes_for_hash; end
end

class ActiveRecord::ConnectionAdapters::Table
  include ::ActiveRecord::ConnectionAdapters::ColumnMethods

  def initialize(table_name, base); end

  def belongs_to(*args); end
  def change(column_name, type, options = T.unsafe(nil)); end
  def change_default(column_name, default_or_changes); end
  def column(column_name, type, options = T.unsafe(nil)); end
  def column_exists?(column_name, type = T.unsafe(nil), options = T.unsafe(nil)); end
  def foreign_key(*args); end
  def foreign_key_exists?(*args); end
  def index(column_name, options = T.unsafe(nil)); end
  def index_exists?(column_name, options = T.unsafe(nil)); end
  def name; end
  def references(*args); end
  def remove(*column_names); end
  def remove_belongs_to(*args); end
  def remove_index(options = T.unsafe(nil)); end
  def remove_references(*args); end
  def remove_timestamps(options = T.unsafe(nil)); end
  def rename(column_name, new_column_name); end
  def rename_index(index_name, new_index_name); end
  def timestamps(options = T.unsafe(nil)); end
end

class ActiveRecord::ConnectionAdapters::TableDefinition
  include ::ActiveRecord::ConnectionAdapters::ColumnMethods

  def initialize(name, temporary = T.unsafe(nil), options = T.unsafe(nil), as = T.unsafe(nil), comment: T.unsafe(nil)); end

  def [](name); end
  def as; end
  def belongs_to(*args, **options); end
  def column(name, type, options = T.unsafe(nil)); end
  def columns; end
  def comment; end
  def foreign_key(table_name, options = T.unsafe(nil)); end
  def foreign_keys; end
  def index(column_name, options = T.unsafe(nil)); end
  def indexes; end
  def indexes=(_arg0); end
  def name; end
  def new_column_definition(name, type, options); end
  def options; end
  def primary_keys(name = T.unsafe(nil)); end
  def references(*args, **options); end
  def remove_column(name); end
  def temporary; end
  def timestamps(*args); end

  private

  def aliased_types(name, fallback); end
  def create_column_definition(name, type); end
end

class ActiveRecord::ConnectionAdapters::Transaction
  def initialize(connection, options, run_commit_callbacks: T.unsafe(nil)); end

  def add_record(record); end
  def before_commit_records; end
  def closed?; end
  def commit; end
  def commit_records; end
  def connection; end
  def full_rollback?; end
  def joinable=(_arg0); end
  def joinable?; end
  def open?; end
  def records; end
  def rollback; end
  def rollback_records; end
  def savepoint_name; end
  def state; end
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  def initialize(connection); end

  def begin_transaction(options = T.unsafe(nil)); end
  def commit_transaction; end
  def current_transaction; end
  def open_transactions; end
  def rollback_transaction(transaction = T.unsafe(nil)); end
  def within_new_transaction(options = T.unsafe(nil)); end

  private

  def after_failure_actions(transaction, error); end
end

ActiveRecord::ConnectionAdapters::TransactionManager::NULL_TRANSACTION = T.let(T.unsafe(nil), ActiveRecord::ConnectionAdapters::NullTransaction)

class ActiveRecord::ConnectionAdapters::TransactionState
  def initialize(state = T.unsafe(nil)); end

  def committed?; end
  def completed?; end
  def finalized?; end
  def rolledback?; end
  def set_state(state); end
end

ActiveRecord::ConnectionAdapters::TransactionState::VALID_STATES = T.let(T.unsafe(nil), Set)

module ActiveRecord::ConnectionHandling
  def clear_active_connections!(*args, &block); end
  def clear_all_connections!(*args, &block); end
  def clear_cache!; end
  def clear_reloadable_connections!(*args, &block); end
  def connected?; end
  def connection; end
  def connection_config; end
  def connection_id; end
  def connection_id=(connection_id); end
  def connection_pool; end
  def connection_specification_name; end
  def connection_specification_name=(_arg0); end
  def establish_connection(spec = T.unsafe(nil)); end
  def remove_connection(name = T.unsafe(nil)); end
  def retrieve_connection; end
end

ActiveRecord::ConnectionHandling::DEFAULT_ENV = T.let(T.unsafe(nil), Proc)

class ActiveRecord::ConnectionHandling::MergeAndResolveDefaultUrlConfig
  def initialize(raw_configurations); end

  def resolve; end

  private

  def config; end
end

ActiveRecord::ConnectionHandling::RAILS_ENV = T.let(T.unsafe(nil), Proc)
class ActiveRecord::ConnectionNotEstablished < ::ActiveRecord::ActiveRecordError; end
class ActiveRecord::ConnectionTimeoutError < ::ActiveRecord::ConnectionNotEstablished; end

module ActiveRecord::Core
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Core::ClassMethods

  def initialize(attributes = T.unsafe(nil)); end

  def <=>(other_object); end
  def ==(comparison_object); end
  def connection_handler; end
  def encode_with(coder); end
  def eql?(comparison_object); end
  def freeze; end
  def frozen?; end
  def hash; end
  def init_with(coder); end
  def inspect; end
  def pretty_print(pp); end
  def readonly!; end
  def readonly?; end
  def slice(*methods); end

  private

  def custom_inspect_method_defined?; end
  def init_internals; end
  def initialize_dup(other); end
  def initialize_internals_callback; end
  def thaw; end
  def to_ary; end
end

module ActiveRecord::Core::ClassMethods
  def ===(object); end
  def allocate; end
  def arel_attribute(name, table = T.unsafe(nil)); end
  def arel_engine; end
  def arel_table; end
  def find(*ids); end
  def find_by(*args); end
  def find_by!(*args); end
  def generated_association_methods; end
  def inherited(child_class); end
  def initialize_find_by_cache; end
  def initialize_generated_modules; end
  def inspect; end
  def predicate_builder; end
  def type_caster; end

  private

  def cached_find_by_statement(key, &block); end
  def relation; end
  def table_metadata; end
end

module ActiveRecord::CounterCache
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::CounterCache::ClassMethods

  private

  def _create_record(*_arg0); end
  def destroy_row; end
  def each_counter_cached_associations; end
end

module ActiveRecord::CounterCache::ClassMethods
  def decrement_counter(counter_name, id); end
  def increment_counter(counter_name, id); end
  def reset_counters(id, *counters); end
  def update_counters(id, counters); end
end

class ActiveRecord::DangerousAttributeError < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Delegation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Delegation::ClassMethods

  def &(*args, &block); end
  def +(*args, &block); end
  def -(*args, &block); end
  def [](*args, &block); end
  def all?(*args, &block); end
  def collect(*args, &block); end
  def columns_hash(*args, &block); end
  def compact(*args, &block); end
  def connection(*args, &block); end
  def each(*args, &block); end
  def encode_with(*args, &block); end
  def in_groups(*args, &block); end
  def in_groups_of(*args, &block); end
  def include?(*args, &block); end
  def index(*args, &block); end
  def join(*args, &block); end
  def length(*args, &block); end
  def map(*args, &block); end
  def primary_key(*args, &block); end
  def quoted_primary_key(*args, &block); end
  def quoted_table_name(*args, &block); end
  def respond_to?(method, include_private = T.unsafe(nil)); end
  def reverse(*args, &block); end
  def sample(*args, &block); end
  def shuffle(*args, &block); end
  def split(*args, &block); end
  def table_name(*args, &block); end
  def to_ary(*args, &block); end
  def to_formatted_s(*args, &block); end
  def to_sentence(*args, &block); end
  def to_xml(*args, &block); end
  def |(*args, &block); end

  protected

  def method_missing(method, *args, &block); end
end

module ActiveRecord::Delegation::ClassMethods
  def create(klass, *args); end

  private

  def relation_class_for(klass); end
end

module ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods

  protected

  def method_missing(method, *args, &block); end
end

module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  def delegate(method, opts = T.unsafe(nil)); end
  def delegate_to_scoped_klass(method); end
  def name; end
end

module ActiveRecord::Delegation::DelegateCache
  def inherited(child_class); end
  def initialize_relation_delegate_cache; end
  def relation_delegate_class(klass); end
end

class ActiveRecord::DeleteRestrictionError < ::ActiveRecord::ActiveRecordError
  def initialize(name = T.unsafe(nil)); end
end

class ActiveRecord::DuplicateMigrationNameError < ::ActiveRecord::MigrationError
  def initialize(name = T.unsafe(nil)); end
end

class ActiveRecord::DuplicateMigrationVersionError < ::ActiveRecord::MigrationError
  def initialize(version = T.unsafe(nil)); end
end

module ActiveRecord::DynamicMatchers
  def respond_to?(name, include_private = T.unsafe(nil)); end

  private

  def method_missing(name, *arguments, &block); end
end

class ActiveRecord::DynamicMatchers::FindBy < ::ActiveRecord::DynamicMatchers::Method
  def finder; end

  class << self
    def prefix; end
  end
end

class ActiveRecord::DynamicMatchers::FindByBang < ::ActiveRecord::DynamicMatchers::Method
  def finder; end

  class << self
    def prefix; end
    def suffix; end
  end
end

class ActiveRecord::DynamicMatchers::Method
  def initialize(model, name); end

  def attribute_names; end
  def define; end
  def model; end
  def name; end
  def valid?; end

  private

  def attributes_hash; end
  def body; end
  def finder; end
  def signature; end

  class << self
    def match(model, name); end
    def matchers; end
    def pattern; end
    def prefix; end
    def suffix; end
  end
end

class ActiveRecord::EagerLoadPolymorphicError < ::ActiveRecord::ActiveRecordError
  def initialize(reflection = T.unsafe(nil)); end
end

module ActiveRecord::Enum
  def enum(definitions); end
  def inherited(base); end

  private

  def _enum_methods_module; end
  def detect_enum_conflict!(enum_name, method_name, klass_method = T.unsafe(nil)); end
  def raise_conflict_error(enum_name, method_name, type: T.unsafe(nil), source: T.unsafe(nil)); end

  class << self
    def extended(base); end
  end
end

ActiveRecord::Enum::ENUM_CONFLICT_MESSAGE = T.let(T.unsafe(nil), String)

class ActiveRecord::Enum::EnumType < ::ActiveModel::Type::Value
  def initialize(name, mapping, subtype); end

  def assert_valid_value(value); end
  def cast(value); end
  def deserialize(value); end
  def serialize(value); end
  def type(*args, &block); end

  protected

  def mapping; end
  def name; end
  def subtype; end
end

class ActiveRecord::EnvironmentMismatchError < ::ActiveRecord::ActiveRecordError
  def initialize(current: T.unsafe(nil), stored: T.unsafe(nil)); end
end

class ActiveRecord::ExclusiveConnectionTimeoutError < ::ActiveRecord::ConnectionTimeoutError; end

module ActiveRecord::Explain
  def collecting_queries_for_explain; end
  def exec_explain(queries); end

  private

  def render_bind(attr); end
end

class ActiveRecord::ExplainRegistry
  extend ::ActiveSupport::PerThreadRegistry

  def initialize; end

  def collect; end
  def collect=(_arg0); end
  def collect?; end
  def queries; end
  def queries=(_arg0); end
  def reset; end
end

class ActiveRecord::ExplainSubscriber
  def finish(name, id, payload); end
  def ignore_payload?(payload); end
  def start(name, id, payload); end
end

ActiveRecord::ExplainSubscriber::EXPLAINED_SQLS = T.let(T.unsafe(nil), Regexp)
ActiveRecord::ExplainSubscriber::IGNORED_PAYLOADS = T.let(T.unsafe(nil), Array)

module ActiveRecord::FinderMethods
  def exists?(conditions = T.unsafe(nil)); end
  def fifth; end
  def fifth!; end
  def find(*args); end
  def find_by(arg, *args); end
  def find_by!(arg, *args); end
  def first(limit = T.unsafe(nil)); end
  def first!; end
  def forty_two; end
  def forty_two!; end
  def fourth; end
  def fourth!; end
  def last(limit = T.unsafe(nil)); end
  def last!; end
  def raise_record_not_found_exception!(ids, result_size, expected_size, key = T.unsafe(nil)); end
  def second; end
  def second!; end
  def second_to_last; end
  def second_to_last!; end
  def take(limit = T.unsafe(nil)); end
  def take!; end
  def third; end
  def third!; end
  def third_to_last; end
  def third_to_last!; end

  protected

  def find_nth(index, offset = T.unsafe(nil)); end
  def find_nth!(index); end
  def find_nth_from_last(index); end
  def find_nth_with_limit(index, limit); end
  def find_one(id); end
  def find_some(ids); end
  def find_some_ordered(ids); end
  def find_take; end
  def find_with_ids(*ids); end

  private

  def apply_join_dependency(relation, join_dependency); end
  def construct_join_dependency(joins = T.unsafe(nil)); end
  def construct_relation_for_association_calculations; end
  def find_last(limit); end
  def find_nth_with_limit_and_offset(index, limit, offset:); end
  def find_with_associations; end
  def limited_ids_for(relation); end
  def offset_index; end
  def using_limitable_reflections?(reflections); end
end

ActiveRecord::FinderMethods::ONE_AS_ONE = T.let(T.unsafe(nil), String)

class ActiveRecord::Fixture
  include ::Enumerable

  def initialize(fixture, model_class); end

  def [](key); end
  def class_name; end
  def each; end
  def find; end
  def fixture; end
  def model_class; end
  def to_hash; end
end

class ActiveRecord::Fixture::FixtureError < ::StandardError; end
class ActiveRecord::Fixture::FormatError < ::ActiveRecord::Fixture::FixtureError; end
class ActiveRecord::FixtureClassNotFound < ::ActiveRecord::ActiveRecordError; end

class ActiveRecord::FixtureSet
  def initialize(connection, name, class_name, path, config = T.unsafe(nil)); end

  def [](x); end
  def []=(k, v); end
  def all_loaded_fixtures; end
  def all_loaded_fixtures=(obj); end
  def config; end
  def each(&block); end
  def fixtures; end
  def model_class; end
  def name; end
  def size; end
  def table_name; end
  def table_rows; end

  private

  def add_join_records(rows, row, association); end
  def column_names; end
  def has_primary_key_column?; end
  def inheritance_column_name; end
  def model_class=(class_name); end
  def primary_key_name; end
  def primary_key_type; end
  def read_fixture_files(path); end
  def timestamp_column_names; end
  def yaml_file_path(path); end

  class << self
    def all_loaded_fixtures; end
    def all_loaded_fixtures=(obj); end
    def cache_fixtures(connection, fixtures_map); end
    def cache_for_connection(connection); end
    def cached_fixtures(connection, keys_to_fetch = T.unsafe(nil)); end
    def context_class; end
    def create_fixtures(fixtures_directory, fixture_set_names, class_names = T.unsafe(nil), config = T.unsafe(nil)); end
    def default_fixture_model_name(fixture_set_name, config = T.unsafe(nil)); end
    def default_fixture_table_name(fixture_set_name, config = T.unsafe(nil)); end
    def fixture_is_cached?(connection, table_name); end
    def identify(label, column_type = T.unsafe(nil)); end
    def instantiate_all_loaded_fixtures(object, load_instances = T.unsafe(nil)); end
    def instantiate_fixtures(object, fixture_set, load_instances = T.unsafe(nil)); end
    def reset_cache; end
    def update_all_loaded_fixtures(fixtures_map); end
  end
end

class ActiveRecord::FixtureSet::ClassCache
  def initialize(class_names, config); end

  def [](fs_name); end

  private

  def default_fixture_model(fs_name, config); end
  def insert_class(class_names, name, klass); end
end

class ActiveRecord::FixtureSet::File
  include ::Enumerable

  def initialize(file); end

  def each(&block); end
  def model_class; end

  private

  def config_row; end
  def prepare_erb(content); end
  def raw_rows; end
  def render(content); end
  def rows; end
  def validate(data); end

  class << self
    def open(file); end
  end
end

class ActiveRecord::FixtureSet::HasManyThroughProxy < ::ActiveRecord::FixtureSet::ReflectionProxy
  def join_table; end
  def lhs_key; end
  def rhs_key; end
end

ActiveRecord::FixtureSet::MAX_ID = T.let(T.unsafe(nil), Integer)

class ActiveRecord::FixtureSet::ReflectionProxy
  def initialize(association); end

  def join_table; end
  def name; end
  def primary_key_type; end
end

class ActiveRecord::FixtureSet::RenderContext
  class << self
    def create_subclass; end
  end
end

class ActiveRecord::HasManyThroughAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), source_reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughAssociationPolymorphicSourceError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), source_reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughAssociationPolymorphicThroughError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughCantAssociateNewRecords < ::ActiveRecord::ActiveRecordError
  def initialize(owner = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection; end

class ActiveRecord::HasManyThroughCantDissociateNewRecords < ::ActiveRecord::ActiveRecordError
  def initialize(owner = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasManyThroughNestedAssociationsAreReadonly < ::ActiveRecord::ThroughNestedAssociationsAreReadonly; end

class ActiveRecord::HasManyThroughSourceAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  def initialize(reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasOneAssociationPolymorphicThroughError < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasOneThroughCantAssociateThroughCollection < ::ActiveRecord::ActiveRecordError
  def initialize(owner_class_name = T.unsafe(nil), reflection = T.unsafe(nil), through_reflection = T.unsafe(nil)); end
end

class ActiveRecord::HasOneThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection; end
class ActiveRecord::HasOneThroughNestedAssociationsAreReadonly < ::ActiveRecord::ThroughNestedAssociationsAreReadonly; end

class ActiveRecord::IllegalMigrationNameError < ::ActiveRecord::MigrationError
  def initialize(name = T.unsafe(nil)); end
end

class ActiveRecord::ImmutableRelation < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Inheritance
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Inheritance::ClassMethods

  private

  def ensure_proper_type; end
  def initialize_dup(other); end
  def initialize_internals_callback; end
end

module ActiveRecord::Inheritance::ClassMethods
  def abstract_class; end
  def abstract_class=(_arg0); end
  def abstract_class?; end
  def base_class; end
  def descends_from_active_record?; end
  def finder_needs_type_condition?; end
  def new(*args, &block); end
  def sti_name; end

  protected

  def compute_type(type_name); end

  private

  def discriminate_class_for_record(record); end
  def find_sti_class(type_name); end
  def subclass_from_attributes(attrs); end
  def type_condition(table = T.unsafe(nil)); end
  def using_single_table_inheritance?(record); end
end

module ActiveRecord::Integration
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Integration::ClassMethods

  def cache_key(*timestamp_names); end
  def to_param; end
end

module ActiveRecord::Integration::ClassMethods
  def to_param(method_name = T.unsafe(nil)); end
end

class ActiveRecord::InternalMetadata < ::ActiveRecord::Base
  include ::ActiveRecord::InternalMetadata::GeneratedAssociationMethods

  class << self
    def [](key); end
    def []=(key, value); end
    def _validators; end
    def attribute_type_decorations; end
    def create_table; end
    def defined_enums; end
    def original_table_exists?; end
    def original_table_name; end
    def primary_key; end
    def table_exists?; end
    def table_name; end
  end
end

class ActiveRecord::InternalMetadata::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
end

class ActiveRecord::InternalMetadata::ActiveRecord_Relation < ::ActiveRecord::Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
end

module ActiveRecord::InternalMetadata::GeneratedAssociationMethods; end
class ActiveRecord::InvalidForeignKey < ::ActiveRecord::WrappedDatabaseException; end

class ActiveRecord::InverseOfAssociationNotFoundError < ::ActiveRecord::ActiveRecordError
  def initialize(reflection = T.unsafe(nil), associated_class = T.unsafe(nil)); end
end

class ActiveRecord::IrreversibleMigration < ::ActiveRecord::MigrationError; end
class ActiveRecord::IrreversibleOrderError < ::ActiveRecord::ActiveRecordError; end

class ActiveRecord::LazyAttributeHash
  def initialize(types, values, additional_types, default_attributes, delegate_hash = T.unsafe(nil)); end

  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def deep_dup; end
  def each_key(*args, &block); end
  def encode_with(coder); end
  def except(*args, &block); end
  def fetch(*args, &block); end
  def init_with(coder); end
  def key?(key); end
  def marshal_dump; end
  def marshal_load(values); end
  def select; end
  def transform_values(*args, &block); end

  protected

  def additional_types; end
  def default_attributes; end
  def delegate_hash; end
  def materialize; end
  def types; end
  def values; end

  private

  def assign_default_value(name); end
  def initialize_dup(_); end
end

module ActiveRecord::LegacyYamlAdapter
  class << self
    def convert(klass, coder); end
  end
end

module ActiveRecord::LegacyYamlAdapter::Rails41
  class << self
    def convert(klass, coder); end
  end
end

module ActiveRecord::LegacyYamlAdapter::Rails420
  class << self
    def convert(klass, coder); end
  end
end

module ActiveRecord::Locking
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::Locking::LockingType
  def deserialize(value); end
  def encode_with(coder); end
  def init_with(coder); end
  def serialize(value); end
end

module ActiveRecord::Locking::Optimistic
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Locking::Optimistic::ClassMethods

  def locking_enabled?; end

  private

  def _create_record(attribute_names = T.unsafe(nil), *_arg1); end
  def _update_record(attribute_names = T.unsafe(nil)); end
  def destroy_row; end
  def increment_lock; end
  def relation_for_destroy; end
end

module ActiveRecord::Locking::Optimistic::ClassMethods
  def locking_column; end
  def locking_column=(value); end
  def locking_enabled?; end
  def reset_locking_column; end
  def update_counters(id, counters); end

  private

  def inherited(subclass); end
end

ActiveRecord::Locking::Optimistic::ClassMethods::DEFAULT_LOCKING_COLUMN = T.let(T.unsafe(nil), String)

module ActiveRecord::Locking::Pessimistic
  def lock!(lock = T.unsafe(nil)); end
  def with_lock(lock = T.unsafe(nil)); end
end

class ActiveRecord::LogSubscriber < ::ActiveSupport::LogSubscriber
  def initialize; end

  def sql(event); end

  private

  def colorize_payload_name(name, payload_name); end
  def logger; end
  def render_bind(attr, value); end
  def sql_color(sql); end
  def type_casted_binds(casted_binds); end

  class << self
    def reset_runtime; end
    def runtime; end
    def runtime=(value); end
  end
end

ActiveRecord::LogSubscriber::IGNORE_PAYLOAD_NAMES = T.let(T.unsafe(nil), Array)

class ActiveRecord::Migration
  def initialize(name = T.unsafe(nil), version = T.unsafe(nil)); end

  def announce(message); end
  def connection; end
  def copy(destination, sources, options = T.unsafe(nil)); end
  def disable_ddl_transaction; end
  def down; end
  def exec_migration(conn, direction); end
  def method_missing(method, *arguments, &block); end
  def migrate(direction); end
  def name; end
  def name=(_arg0); end
  def next_migration_number(number); end
  def proper_table_name(name, options = T.unsafe(nil)); end
  def reversible; end
  def revert(*migration_classes); end
  def reverting?; end
  def run(*migration_classes); end
  def say(message, subitem = T.unsafe(nil)); end
  def say_with_time(message); end
  def suppress_messages; end
  def table_name_options(config = T.unsafe(nil)); end
  def up; end
  def verbose; end
  def verbose=(obj); end
  def version; end
  def version=(_arg0); end
  def write(text = T.unsafe(nil)); end

  private

  def execute_block; end

  class << self
    def [](version); end
    def check_pending!(connection = T.unsafe(nil)); end
    def current_version; end
    def delegate; end
    def delegate=(_arg0); end
    def disable_ddl_transaction; end
    def disable_ddl_transaction!; end
    def disable_ddl_transaction=(_arg0); end
    def inherited(subclass); end
    def load_schema_if_pending!; end
    def maintain_test_schema!; end
    def method_missing(name, *args, &block); end
    def migrate(direction); end
    def nearest_delegate; end
    def verbose; end
    def verbose=(obj); end
  end
end

class ActiveRecord::Migration::CheckPending
  def initialize(app); end

  def call(env); end

  private

  def connection; end
end

class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions

  def initialize(delegate = T.unsafe(nil)); end

  def add_belongs_to(*args, &block); end
  def add_column(*args, &block); end
  def add_foreign_key(*args, &block); end
  def add_index(*args, &block); end
  def add_reference(*args, &block); end
  def add_timestamps(*args, &block); end
  def change_column(*args, &block); end
  def change_column_default(*args, &block); end
  def change_column_null(*args, &block); end
  def change_table(table_name, options = T.unsafe(nil)); end
  def commands; end
  def commands=(_arg0); end
  def create_join_table(*args, &block); end
  def create_table(*args, &block); end
  def delegate; end
  def delegate=(_arg0); end
  def disable_extension(*args, &block); end
  def drop_join_table(*args, &block); end
  def drop_table(*args, &block); end
  def enable_extension(*args, &block); end
  def execute(*args, &block); end
  def execute_block(*args, &block); end
  def inverse_of(command, args, &block); end
  def invert_add_belongs_to(args, &block); end
  def invert_remove_belongs_to(args, &block); end
  def record(*command, &block); end
  def remove_belongs_to(*args, &block); end
  def remove_column(*args, &block); end
  def remove_columns(*args, &block); end
  def remove_foreign_key(*args, &block); end
  def remove_index(*args, &block); end
  def remove_reference(*args, &block); end
  def remove_timestamps(*args, &block); end
  def rename_column(*args, &block); end
  def rename_index(*args, &block); end
  def rename_table(*args, &block); end
  def respond_to?(*args); end
  def revert; end
  def reverting; end
  def reverting=(_arg0); end
  def transaction(*args, &block); end

  private

  def invert_add_foreign_key(args); end
  def invert_add_index(args); end
  def invert_change_column_default(args); end
  def invert_change_column_null(args); end
  def invert_drop_table(args, &block); end
  def invert_remove_column(args); end
  def invert_remove_foreign_key(args); end
  def invert_remove_index(args); end
  def invert_rename_column(args); end
  def invert_rename_index(args); end
  def invert_rename_table(args); end
  def method_missing(method, *args, &block); end
end

ActiveRecord::Migration::CommandRecorder::ReversibleAndIrreversibleMethods = T.let(T.unsafe(nil), Array)

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  def invert_add_column(args, &block); end
  def invert_add_reference(args, &block); end
  def invert_add_timestamps(args, &block); end
  def invert_create_join_table(args, &block); end
  def invert_create_table(args, &block); end
  def invert_disable_extension(args, &block); end
  def invert_drop_join_table(args, &block); end
  def invert_drop_table(args, &block); end
  def invert_enable_extension(args, &block); end
  def invert_execute_block(args, &block); end
  def invert_remove_column(args, &block); end
  def invert_remove_reference(args, &block); end
  def invert_remove_timestamps(args, &block); end
  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::Compatibility
  class << self
    def find(version); end
  end
end

module ActiveRecord::Migration::Compatibility::FourTwoShared
  def add_belongs_to(*_arg0, **options); end
  def add_reference(*_arg0, **options); end
  def add_timestamps(*_arg0, **options); end
  def change_table(table_name, options = T.unsafe(nil)); end
  def create_table(table_name, options = T.unsafe(nil)); end
  def index_exists?(table_name, column_name, options = T.unsafe(nil)); end
  def remove_index(table_name, options = T.unsafe(nil)); end

  private

  def index_name_for_remove(table_name, options = T.unsafe(nil)); end
end

module ActiveRecord::Migration::Compatibility::FourTwoShared::TableDefinition
  def belongs_to(*_arg0, **options); end
  def references(*_arg0, **options); end
  def timestamps(*_arg0, **options); end
end

module ActiveRecord::Migration::Compatibility::Legacy
  include ::ActiveRecord::Migration::Compatibility::FourTwoShared

  def migrate(*_arg0); end
end

class ActiveRecord::Migration::Compatibility::V4_2 < ::ActiveRecord::Migration::Current
  include ::ActiveRecord::Migration::Compatibility::FourTwoShared
end

ActiveRecord::Migration::Compatibility::V5_0 = ActiveRecord::Migration::Current
class ActiveRecord::Migration::Current < ::ActiveRecord::Migration; end

module ActiveRecord::Migration::JoinTable
  private

  def find_join_table_name(table_1, table_2, options = T.unsafe(nil)); end
  def join_table_name(table_1, table_2); end
end

ActiveRecord::Migration::MigrationFilenameRegexp = T.let(T.unsafe(nil), Regexp)

class ActiveRecord::Migration::ReversibleBlockHelper < ::Struct
  def down; end
  def up; end
end

class ActiveRecord::MigrationError < ::ActiveRecord::ActiveRecordError
  def initialize(message = T.unsafe(nil)); end
end

class ActiveRecord::MigrationProxy < ::Struct
  def initialize(name, version, filename, scope); end

  def announce(*args, &block); end
  def basename; end
  def disable_ddl_transaction(*args, &block); end
  def migrate(*args, &block); end
  def mtime; end
  def write(*args, &block); end

  private

  def load_migration; end
  def migration; end
end

class ActiveRecord::Migrator
  def initialize(direction, migrations, target_version = T.unsafe(nil)); end

  def current; end
  def current_migration; end
  def current_version; end
  def load_migrated; end
  def migrate; end
  def migrated; end
  def migrations; end
  def pending_migrations; end
  def run; end
  def runnable; end

  private

  def ddl_transaction(migration); end
  def down?; end
  def execute_migration_in_transaction(migration, direction); end
  def finish; end
  def generate_migrator_advisory_lock_id; end
  def invalid_target?; end
  def migrate_without_lock; end
  def ran?(migration); end
  def record_environment; end
  def record_version_state_after_migrating(version); end
  def run_without_lock; end
  def start; end
  def target; end
  def up?; end
  def use_advisory_lock?; end
  def use_transaction?(migration); end
  def validate(migrations); end
  def with_advisory_lock; end

  class << self
    def any_migrations?; end
    def current_environment; end
    def current_version(connection = T.unsafe(nil)); end
    def down(migrations_paths, target_version = T.unsafe(nil)); end
    def forward(migrations_paths, steps = T.unsafe(nil)); end
    def get_all_versions(connection = T.unsafe(nil)); end
    def last_migration; end
    def last_stored_environment; end
    def migrate(migrations_paths, target_version = T.unsafe(nil), &block); end
    def migration_files(paths); end
    def migrations(paths); end
    def migrations_path=(_arg0); end
    def migrations_paths; end
    def migrations_paths=(_arg0); end
    def migrations_status(paths); end
    def needs_migration?(connection = T.unsafe(nil)); end
    def open(migrations_paths); end
    def parse_migration_filename(filename); end
    def protected_environment?; end
    def rollback(migrations_paths, steps = T.unsafe(nil)); end
    def run(direction, migrations_paths, target_version); end
    def schema_migrations_table_name; end
    def up(migrations_paths, target_version = T.unsafe(nil)); end

    private

    def move(direction, migrations_paths, steps); end
  end
end

ActiveRecord::Migrator::MIGRATOR_SALT = T.let(T.unsafe(nil), Integer)

module ActiveRecord::ModelSchema
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::ModelSchema::ClassMethods

  class << self
    def derive_join_table_name(first_table, second_table); end
  end
end

module ActiveRecord::ModelSchema::ClassMethods
  def _default_attributes; end
  def attribute_types; end
  def attributes_builder; end
  def column_defaults; end
  def column_names; end
  def columns; end
  def columns_hash; end
  def content_columns; end
  def full_table_name_prefix; end
  def full_table_name_suffix; end
  def ignored_columns; end
  def ignored_columns=(columns); end
  def inheritance_column; end
  def inheritance_column=(value); end
  def next_sequence_value; end
  def prefetch_primary_key?; end
  def quoted_table_name; end
  def reset_column_information; end
  def reset_sequence_name; end
  def reset_table_name; end
  def sequence_name; end
  def sequence_name=(value); end
  def table_exists?; end
  def table_name; end
  def table_name=(value); end
  def type_for_attribute(attr_name, &block); end

  protected

  def initialize_load_schema_monitor; end

  private

  def compute_table_name; end
  def inherited(child_class); end
  def load_schema; end
  def load_schema!; end
  def reload_schema_from_cache; end
  def schema_loaded?; end
  def undecorated_table_name(class_name = T.unsafe(nil)); end
  def warn_if_deprecated_type(column); end
end

class ActiveRecord::MultiparameterAssignmentErrors < ::ActiveRecord::ActiveRecordError
  def initialize(errors = T.unsafe(nil)); end

  def errors; end
end

module ActiveRecord::NestedAttributes
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::NestedAttributes::ClassMethods

  def _destroy; end

  private

  def allow_destroy?(association_name); end
  def assign_nested_attributes_for_collection_association(association_name, attributes_collection); end
  def assign_nested_attributes_for_one_to_one_association(association_name, attributes); end
  def assign_to_or_mark_for_destruction(record, attributes, allow_destroy); end
  def call_reject_if(association_name, attributes); end
  def check_record_limit!(limit, attributes_collection); end
  def has_destroy_flag?(hash); end
  def raise_nested_attributes_record_not_found!(association_name, record_id); end
  def reject_new_record?(association_name, attributes); end
  def will_be_destroyed?(association_name, attributes); end
end

module ActiveRecord::NestedAttributes::ClassMethods
  def accepts_nested_attributes_for(*attr_names); end

  private

  def generate_association_writer(association_name, type); end
end

ActiveRecord::NestedAttributes::ClassMethods::REJECT_ALL_BLANK_PROC = T.let(T.unsafe(nil), Proc)
class ActiveRecord::NestedAttributes::TooManyRecords < ::ActiveRecord::ActiveRecordError; end
ActiveRecord::NestedAttributes::UNASSIGNABLE_KEYS = T.let(T.unsafe(nil), Array)
class ActiveRecord::NoDatabaseError < ::ActiveRecord::StatementInvalid; end

class ActiveRecord::NoEnvironmentInSchemaError < ::ActiveRecord::MigrationError
  def initialize; end
end

module ActiveRecord::NoTouching
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::NoTouching::ClassMethods

  def no_touching?; end
  def touch(*_arg0); end
  def touch_later(*_arg0); end

  class << self
    def applied_to?(klass); end
    def apply_to(klass); end

    private

    def klasses; end
  end
end

module ActiveRecord::NoTouching::ClassMethods
  def no_touching(&block); end
end

class ActiveRecord::NullMigration < ::ActiveRecord::MigrationProxy
  def initialize; end

  def mtime; end
end

class ActiveRecord::NullMutationTracker
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  def changed?(*_arg0); end
  def changed_in_place?(*_arg0); end
  def changed_values; end
  def changes; end
  def forget_change(*_arg0); end
end

module ActiveRecord::NullRelation
  def any?; end
  def average(*_arg0); end
  def calculate(operation, _column_name); end
  def count(*_arg0); end
  def delete(_id_or_array); end
  def delete_all(_conditions = T.unsafe(nil)); end
  def empty?; end
  def exec_queries; end
  def exists?(_conditions = T.unsafe(nil)); end
  def many?; end
  def maximum(*_arg0); end
  def minimum(*_arg0); end
  def none?; end
  def one?; end
  def or(other); end
  def pluck(*column_names); end
  def size; end
  def sum(*_arg0); end
  def to_sql; end
  def update_all(_updates); end
end

class ActiveRecord::PendingMigrationError < ::ActiveRecord::MigrationError
  def initialize(message = T.unsafe(nil)); end
end

module ActiveRecord::Persistence
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Persistence::ClassMethods

  def becomes(klass); end
  def becomes!(klass); end
  def decrement(attribute, by = T.unsafe(nil)); end
  def decrement!(attribute, by = T.unsafe(nil)); end
  def delete; end
  def destroy; end
  def destroy!; end
  def destroyed?; end
  def increment(attribute, by = T.unsafe(nil)); end
  def increment!(attribute, by = T.unsafe(nil)); end
  def new_record?; end
  def persisted?; end
  def reload(options = T.unsafe(nil)); end
  def save(*args, &block); end
  def save!(*args, &block); end
  def toggle(attribute); end
  def toggle!(attribute); end
  def touch(*names, time: T.unsafe(nil)); end
  def update(attributes); end
  def update!(attributes); end
  def update_attribute(name, value); end
  def update_attributes(attributes); end
  def update_attributes!(attributes); end
  def update_column(name, value); end
  def update_columns(attributes); end

  private

  def _create_record(attribute_names = T.unsafe(nil)); end
  def _raise_record_not_destroyed; end
  def _update_record(attribute_names = T.unsafe(nil)); end
  def belongs_to_touch_method; end
  def create_or_update(*args, &block); end
  def destroy_associations; end
  def destroy_row; end
  def relation_for_destroy; end
  def verify_readonly_attribute(name); end
end

module ActiveRecord::Persistence::ClassMethods
  def create(attributes = T.unsafe(nil), &block); end
  def create!(attributes = T.unsafe(nil), &block); end
  def instantiate(attributes, column_types = T.unsafe(nil), &block); end

  private

  def discriminate_class_for_record(record); end
end

class ActiveRecord::PredicateBuilder
  def initialize(table); end

  def build(attribute, value); end
  def build_from_hash(attributes); end
  def create_binds(attributes); end
  def expand(column, value); end
  def register_handler(klass, handler); end
  def resolve_column_aliases(*args, &block); end

  protected

  def create_binds_for_hash(attributes); end
  def expand_from_hash(attributes); end
  def table; end

  private

  def associated_predicate_builder(association_name); end
  def build_bind_param(column_name, value); end
  def can_be_bound?(column_name, value); end
  def convert_dot_notation_to_hash(attributes); end
  def handler_for(object); end

  class << self
    def references(attributes); end
  end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  def initialize(predicate_builder); end

  def call(attribute, value); end

  protected

  def predicate_builder; end
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
  class << self
    def or(other); end
  end
end

class ActiveRecord::PredicateBuilder::AssociationQueryHandler
  def initialize(predicate_builder); end

  def call(attribute, value); end

  protected

  def predicate_builder; end

  class << self
    def value_for(table, column, value); end
  end
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
  def initialize(associated_table, value); end

  def associated_table; end
  def base_class; end
  def ids; end
  def value; end

  private

  def convert_to_id(value); end
  def polymorphic_base_class_from_value; end
  def primary_key; end
end

class ActiveRecord::PredicateBuilder::BaseHandler
  def initialize(predicate_builder); end

  def call(attribute, value); end

  protected

  def predicate_builder; end
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
  def initialize(predicate_builder); end

  def call(attribute, value); end

  protected

  def predicate_builder; end
end

class ActiveRecord::PredicateBuilder::ClassHandler
  def initialize(predicate_builder); end

  def call(attribute, value); end

  protected

  def predicate_builder; end

  private

  def print_deprecation_warning; end
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayHandler
  def initialize(predicate_builder); end

  def call(attribute, value); end

  protected

  def predicate_builder; end
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
  def initialize(associated_table, values); end

  def associated_table; end
  def type_to_ids_mapping; end
  def values; end

  private

  def base_class(value); end
  def convert_to_id(value); end
  def primary_key(value); end
end

class ActiveRecord::PredicateBuilder::RangeHandler
  def initialize(predicate_builder); end

  def call(attribute, value); end

  protected

  def predicate_builder; end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds < ::Struct
  def begin; end
  def begin=(_); end
  def end; end
  def end=(_); end
  def exclude_end?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::PredicateBuilder::RelationHandler
  def call(attribute, value); end
end

class ActiveRecord::PreparedStatementCacheExpired < ::ActiveRecord::StatementInvalid; end
class ActiveRecord::PreparedStatementInvalid < ::ActiveRecord::ActiveRecordError; end

class ActiveRecord::ProtectedEnvironmentError < ::ActiveRecord::ActiveRecordError
  def initialize(env = T.unsafe(nil)); end
end

class ActiveRecord::QueryCache
  class << self
    def complete(_arg0); end
    def install_executor_hooks(executor = T.unsafe(nil)); end
    def run; end
  end
end

module ActiveRecord::QueryCache::ClassMethods
  def cache(&block); end
  def uncached(&block); end
end

module ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  extend ::ActiveSupport::Concern

  def _select!(*fields); end
  def arel; end
  def bound_attributes; end
  def create_with(value); end
  def create_with!(value); end
  def create_with_value; end
  def create_with_value=(value); end
  def distinct(value = T.unsafe(nil)); end
  def distinct!(value = T.unsafe(nil)); end
  def distinct_value; end
  def distinct_value=(value); end
  def eager_load(*args); end
  def eager_load!(*args); end
  def eager_load_values; end
  def eager_load_values=(values); end
  def extending(*modules, &block); end
  def extending!(*modules, &block); end
  def extending_values; end
  def extending_values=(values); end
  def extensions; end
  def from(value, subquery_name = T.unsafe(nil)); end
  def from!(value, subquery_name = T.unsafe(nil)); end
  def from_clause; end
  def from_clause=(value); end
  def group(*args); end
  def group!(*args); end
  def group_values; end
  def group_values=(values); end
  def having(opts, *rest); end
  def having!(opts, *rest); end
  def having_clause; end
  def having_clause=(value); end
  def includes(*args); end
  def includes!(*args); end
  def includes_values; end
  def includes_values=(values); end
  def joins(*args); end
  def joins!(*args); end
  def joins_values; end
  def joins_values=(values); end
  def left_joins(*args); end
  def left_joins!(*args); end
  def left_joins_values; end
  def left_joins_values=(values); end
  def left_outer_joins(*args); end
  def left_outer_joins!(*args); end
  def left_outer_joins_values; end
  def left_outer_joins_values=(values); end
  def limit(value); end
  def limit!(value); end
  def limit_value; end
  def limit_value=(value); end
  def lock(locks = T.unsafe(nil)); end
  def lock!(locks = T.unsafe(nil)); end
  def lock_value; end
  def lock_value=(value); end
  def none; end
  def none!; end
  def offset(value); end
  def offset!(value); end
  def offset_value; end
  def offset_value=(value); end
  def or(other); end
  def or!(other); end
  def order(*args); end
  def order!(*args); end
  def order_values; end
  def order_values=(values); end
  def preload(*args); end
  def preload!(*args); end
  def preload_values; end
  def preload_values=(values); end
  def readonly(value = T.unsafe(nil)); end
  def readonly!(value = T.unsafe(nil)); end
  def readonly_value; end
  def readonly_value=(value); end
  def references(*table_names); end
  def references!(*table_names); end
  def references_values; end
  def references_values=(values); end
  def reorder(*args); end
  def reorder!(*args); end
  def reordering_value; end
  def reordering_value=(value); end
  def reverse_order; end
  def reverse_order!; end
  def reverse_order_value; end
  def reverse_order_value=(value); end
  def rewhere(conditions); end
  def select(*fields); end
  def select_values; end
  def select_values=(values); end
  def unscope(*args); end
  def unscope!(*args); end
  def unscope_values; end
  def unscope_values=(values); end
  def where(opts = T.unsafe(nil), *rest); end
  def where!(opts, *rest); end
  def where_clause; end
  def where_clause=(value); end

  private

  def arel_columns(columns); end
  def assert_mutability!; end
  def association_for_table(table_name); end
  def build_arel; end
  def build_from; end
  def build_join_query(manager, buckets, join_type); end
  def build_joins(manager, joins); end
  def build_left_outer_joins(manager, outer_joins); end
  def build_order(arel); end
  def build_select(arel); end
  def check_if_method_has_arguments!(method_name, args); end
  def convert_join_strings_to_ast(table, joins); end
  def does_not_support_reverse?(order); end
  def having_clause_factory; end
  def new_from_clause; end
  def new_having_clause; end
  def new_where_clause; end
  def preprocess_order_args(order_args); end
  def reverse_sql_order(order_query); end
  def string_containing_comma?(value); end
  def structurally_incompatible_values_for_or(other); end
  def symbol_unscoping(scope); end
  def validate_order_args(args); end
  def where_clause_factory; end
end

ActiveRecord::QueryMethods::FROZEN_EMPTY_ARRAY = T.let(T.unsafe(nil), Array)
ActiveRecord::QueryMethods::FROZEN_EMPTY_HASH = T.let(T.unsafe(nil), Hash)
ActiveRecord::QueryMethods::VALID_DIRECTIONS = T.let(T.unsafe(nil), Array)
ActiveRecord::QueryMethods::VALID_UNSCOPING_VALUES = T.let(T.unsafe(nil), Set)

class ActiveRecord::QueryMethods::WhereChain
  include ::ActiveModel::ForbiddenAttributesProtection

  def initialize(scope); end

  def not(opts, *rest); end
end

module ActiveRecord::Querying
  def any?(*args, &block); end
  def average(*args, &block); end
  def calculate(*args, &block); end
  def count(*args, &block); end
  def count_by_sql(sql); end
  def create_with(*args, &block); end
  def delete(*args, &block); end
  def delete_all(*args, &block); end
  def destroy(*args, &block); end
  def destroy_all(*args, &block); end
  def distinct(*args, &block); end
  def eager_load(*args, &block); end
  def except(*args, &block); end
  def exists?(*args, &block); end
  def fifth(*args, &block); end
  def fifth!(*args, &block); end
  def find(*args, &block); end
  def find_by(*args, &block); end
  def find_by!(*args, &block); end
  def find_by_sql(sql, binds = T.unsafe(nil), preparable: T.unsafe(nil), &block); end
  def find_each(*args, &block); end
  def find_in_batches(*args, &block); end
  def find_or_create_by(*args, &block); end
  def find_or_create_by!(*args, &block); end
  def find_or_initialize_by(*args, &block); end
  def first(*args, &block); end
  def first!(*args, &block); end
  def first_or_create(*args, &block); end
  def first_or_create!(*args, &block); end
  def first_or_initialize(*args, &block); end
  def forty_two(*args, &block); end
  def forty_two!(*args, &block); end
  def fourth(*args, &block); end
  def fourth!(*args, &block); end
  def from(*args, &block); end
  def group(*args, &block); end
  def having(*args, &block); end
  def ids(*args, &block); end
  def in_batches(*args, &block); end
  def includes(*args, &block); end
  def joins(*args, &block); end
  def last(*args, &block); end
  def last!(*args, &block); end
  def left_joins(*args, &block); end
  def left_outer_joins(*args, &block); end
  def limit(*args, &block); end
  def lock(*args, &block); end
  def many?(*args, &block); end
  def maximum(*args, &block); end
  def minimum(*args, &block); end
  def none(*args, &block); end
  def none?(*args, &block); end
  def offset(*args, &block); end
  def one?(*args, &block); end
  def or(*args, &block); end
  def order(*args, &block); end
  def pluck(*args, &block); end
  def preload(*args, &block); end
  def readonly(*args, &block); end
  def references(*args, &block); end
  def reorder(*args, &block); end
  def rewhere(*args, &block); end
  def second(*args, &block); end
  def second!(*args, &block); end
  def second_to_last(*args, &block); end
  def second_to_last!(*args, &block); end
  def select(*args, &block); end
  def sum(*args, &block); end
  def take(*args, &block); end
  def take!(*args, &block); end
  def third(*args, &block); end
  def third!(*args, &block); end
  def third_to_last(*args, &block); end
  def third_to_last!(*args, &block); end
  def uniq(*args, &block); end
  def unscope(*args, &block); end
  def update(*args, &block); end
  def update_all(*args, &block); end
  def where(*args, &block); end
end

class ActiveRecord::Railtie < ::Rails::Railtie; end

class ActiveRecord::ReadOnlyAssociation < ::ActiveRecord::ActiveRecordError
  def initialize(reflection = T.unsafe(nil)); end
end

class ActiveRecord::ReadOnlyRecord < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::ReadonlyAttributes
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::ReadonlyAttributes::ClassMethods
end

module ActiveRecord::ReadonlyAttributes::ClassMethods
  def attr_readonly(*attributes); end
  def readonly_attributes; end
end

class ActiveRecord::RecordInvalid < ::ActiveRecord::ActiveRecordError
  def initialize(record = T.unsafe(nil)); end

  def record; end
end

class ActiveRecord::RecordNotDestroyed < ::ActiveRecord::ActiveRecordError
  def initialize(message = T.unsafe(nil), record = T.unsafe(nil)); end

  def record; end
end

class ActiveRecord::RecordNotFound < ::ActiveRecord::ActiveRecordError
  def initialize(message = T.unsafe(nil), model = T.unsafe(nil), primary_key = T.unsafe(nil), id = T.unsafe(nil)); end

  def id; end
  def model; end
  def primary_key; end
end

class ActiveRecord::RecordNotSaved < ::ActiveRecord::ActiveRecordError
  def initialize(message = T.unsafe(nil), record = T.unsafe(nil)); end

  def record; end
end

class ActiveRecord::RecordNotUnique < ::ActiveRecord::WrappedDatabaseException; end

module ActiveRecord::Reflection
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Reflection::ClassMethods

  class << self
    def add_aggregate_reflection(ar, name, reflection); end
    def add_reflection(ar, name, reflection); end
    def create(macro, name, scope, options, ar); end
  end
end

class ActiveRecord::Reflection::AbstractReflection
  def alias_candidate(name); end
  def build_association(attributes, &block); end
  def chain; end
  def check_validity_of_inverse!; end
  def class_name; end
  def constraints; end
  def counter_cache_column; end
  def counter_must_be_updated_by_has_many?; end
  def has_cached_counter?; end
  def inverse_of; end
  def inverse_updates_counter_cache?; end
  def inverse_updates_counter_in_memory?; end
  def inverse_which_updates_counter_cache; end
  def join_keys(association_klass); end
  def primary_key_type; end
  def quoted_table_name; end
  def table_name; end
  def through_reflection?; end
end

class ActiveRecord::Reflection::AbstractReflection::JoinKeys < ::Struct
  def foreign_key; end
  def foreign_key=(_); end
  def key; end
  def key=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class ActiveRecord::Reflection::AggregateReflection < ::ActiveRecord::Reflection::MacroReflection
  def mapping; end
end

class ActiveRecord::Reflection::AssociationReflection < ::ActiveRecord::Reflection::MacroReflection
  def initialize(name, scope, options, active_record); end

  def active_record_primary_key; end
  def add_as_polymorphic_through(reflection, seed); end
  def add_as_source(seed); end
  def add_as_through(seed); end
  def association_class; end
  def association_foreign_key; end
  def association_primary_key(klass = T.unsafe(nil)); end
  def association_primary_key_type; end
  def association_scope_cache(conn, owner); end
  def belongs_to?; end
  def check_eager_loadable!; end
  def check_preloadable!; end
  def check_validity!; end
  def clear_association_scope_cache; end
  def collect_join_chain; end
  def collection?; end
  def compute_class(name); end
  def constructable?; end
  def extensions; end
  def foreign_key; end
  def foreign_type; end
  def has_inverse?; end
  def has_one?; end
  def has_scope?; end
  def join_id_for(owner); end
  def join_table; end
  def klass; end
  def macro; end
  def nested?; end
  def parent_reflection; end
  def parent_reflection=(_arg0); end
  def polymorphic?; end
  def polymorphic_inverse_of(associated_class); end
  def scope_chain; end
  def source_reflection; end
  def through_reflection; end
  def type; end
  def validate?; end

  protected

  def actual_source_reflection; end

  private

  def automatic_inverse_of; end
  def calculate_constructable(macro, options); end
  def can_find_inverse_of_automatically?(reflection); end
  def derive_class_name; end
  def derive_foreign_key; end
  def derive_join_table; end
  def inverse_name; end
  def primary_key(klass); end
  def valid_inverse_reflection?(reflection); end
end

ActiveRecord::Reflection::AssociationReflection::INVALID_AUTOMATIC_INVERSE_OPTIONS = T.let(T.unsafe(nil), Array)
ActiveRecord::Reflection::AssociationReflection::VALID_AUTOMATIC_INVERSE_MACROS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Reflection::BelongsToReflection < ::ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def belongs_to?; end
  def join_id_for(owner); end
  def join_keys(association_klass); end
  def macro; end

  private

  def calculate_constructable(macro, options); end
end

module ActiveRecord::Reflection::ClassMethods
  def _reflect_on_association(association); end
  def clear_reflections_cache; end
  def reflect_on_aggregation(aggregation); end
  def reflect_on_all_aggregations; end
  def reflect_on_all_associations(macro = T.unsafe(nil)); end
  def reflect_on_all_autosave_associations; end
  def reflect_on_association(association); end
  def reflections; end
end

class ActiveRecord::Reflection::HasAndBelongsToManyReflection < ::ActiveRecord::Reflection::AssociationReflection
  def initialize(name, scope, options, active_record); end

  def collection?; end
  def macro; end
end

class ActiveRecord::Reflection::HasManyReflection < ::ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def association_primary_key(klass = T.unsafe(nil)); end
  def collection?; end
  def macro; end
end

class ActiveRecord::Reflection::HasOneReflection < ::ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def has_one?; end
  def macro; end

  private

  def calculate_constructable(macro, options); end
end

class ActiveRecord::Reflection::MacroReflection < ::ActiveRecord::Reflection::AbstractReflection
  def initialize(name, scope, options, active_record); end

  def ==(other_aggregation); end
  def active_record; end
  def autosave=(autosave); end
  def compute_class(name); end
  def klass; end
  def name; end
  def options; end
  def plural_name; end
  def scope; end
  def scope_for(klass); end

  private

  def derive_class_name; end
end

class ActiveRecord::Reflection::PolymorphicReflection < ::ActiveRecord::Reflection::ThroughReflection
  def initialize(reflection, previous_reflection); end

  def constraints; end
  def join_keys(association_klass); end
  def klass; end
  def plural_name; end
  def scope; end
  def source_type_info; end
  def table_name; end
  def type; end
end

class ActiveRecord::Reflection::RuntimeReflection < ::ActiveRecord::Reflection::PolymorphicReflection
  def initialize(reflection, association); end

  def alias_candidate(name); end
  def alias_name; end
  def all_includes; end
  def constraints; end
  def klass; end
  def next; end
  def next=(_arg0); end
  def source_type_info; end
  def table_name; end
end

class ActiveRecord::Reflection::ThroughReflection < ::ActiveRecord::Reflection::AbstractReflection
  def initialize(delegate_reflection); end

  def active_record(*args, &block); end
  def active_record_primary_key(*args, &block); end
  def add_as_polymorphic_through(reflection, seed); end
  def add_as_source(seed); end
  def add_as_through(seed); end
  def association_class(*args, &block); end
  def association_foreign_key(*args, &block); end
  def association_primary_key(klass = T.unsafe(nil)); end
  def association_primary_key_type; end
  def association_scope_cache(*args, &block); end
  def autosave=(arg); end
  def belongs_to?(*args, &block); end
  def check_eager_loadable!(*args, &block); end
  def check_preloadable!(*args, &block); end
  def check_validity!; end
  def clear_association_scope_cache; end
  def collect_join_chain; end
  def collect_join_reflections(seed); end
  def collection?(*args, &block); end
  def compute_class(*args, &block); end
  def constraints; end
  def constructable?(*args, &block); end
  def delegate_reflection; end
  def extensions(*args, &block); end
  def foreign_key(*args, &block); end
  def foreign_type(*args, &block); end
  def has_inverse?(*args, &block); end
  def has_one?(*args, &block); end
  def has_scope?; end
  def join_id_for(owner); end
  def join_keys(association_klass); end
  def join_table(*args, &block); end
  def klass; end
  def macro(*args, &block); end
  def name(*args, &block); end
  def nested?; end
  def options(*args, &block); end
  def parent_reflection(*args, &block); end
  def parent_reflection=(arg); end
  def plural_name(*args, &block); end
  def polymorphic?(*args, &block); end
  def polymorphic_inverse_of(*args, &block); end
  def scope(*args, &block); end
  def scope_chain; end
  def scope_for(*args, &block); end
  def source_options; end
  def source_reflection; end
  def source_reflection_name; end
  def source_reflection_names; end
  def through_options; end
  def through_reflection; end
  def through_reflection?; end
  def type(*args, &block); end
  def validate?(*args, &block); end

  protected

  def actual_source_reflection; end
  def inverse_name; end
  def primary_key(klass); end

  private

  def derive_class_name; end
end

class ActiveRecord::Relation
  extend ::ActiveRecord::Delegation::ClassMethods
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::QueryMethods
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::ActiveRecord::FinderMethods
  include ::Enumerable

  def initialize(klass, table, predicate_builder, values = T.unsafe(nil)); end

  def ==(other); end
  def _update_record(values, id, id_was); end
  def any?; end
  def arel_attribute(name); end
  def as_json(options = T.unsafe(nil)); end
  def blank?; end
  def build(*args, &block); end
  def cache_key(timestamp_column = T.unsafe(nil)); end
  def create(*args, &block); end
  def create!(*args, &block); end
  def delete(id_or_array); end
  def delete_all(conditions = T.unsafe(nil)); end
  def destroy(id); end
  def destroy_all(conditions = T.unsafe(nil)); end
  def eager_loading?; end
  def empty?; end
  def empty_scope?; end
  def encode_with(coder); end
  def explain; end
  def find_or_create_by(attributes, &block); end
  def find_or_create_by!(attributes, &block); end
  def find_or_initialize_by(attributes, &block); end
  def first_or_create(attributes = T.unsafe(nil), &block); end
  def first_or_create!(attributes = T.unsafe(nil), &block); end
  def first_or_initialize(attributes = T.unsafe(nil), &block); end
  def insert(values); end
  def inspect; end
  def joined_includes_values; end
  def klass; end
  def load(&block); end
  def loaded; end
  def loaded?; end
  def many?; end
  def model; end
  def new(*args, &block); end
  def none?; end
  def one?; end
  def predicate_builder; end
  def pretty_print(q); end
  def records; end
  def reload; end
  def reset; end
  def scope_for_create; end
  def scoping; end
  def size; end
  def substitute_values(values); end
  def table; end
  def to_a; end
  def to_sql; end
  def update(id = T.unsafe(nil), attributes); end
  def update_all(updates); end
  def values; end
  def where_values_hash(relation_table_name = T.unsafe(nil)); end

  protected

  def load_records(records); end

  private

  def build_preloader; end
  def exec_queries(&block); end
  def initialize_copy(other); end
  def references_eager_loaded_tables?; end
  def tables_in_string(string); end
end

ActiveRecord::Relation::CLAUSE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::FromClause
  def initialize(value, name); end

  def binds; end
  def empty?; end
  def merge(other); end
  def name; end
  def value; end

  class << self
    def empty; end
  end
end

class ActiveRecord::Relation::HashMerger
  def initialize(relation, hash); end

  def hash; end
  def merge; end
  def other; end
  def relation; end
end

ActiveRecord::Relation::INVALID_METHODS_FOR_DELETE_ALL = T.let(T.unsafe(nil), Array)
ActiveRecord::Relation::MULTI_VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::Merger
  def initialize(relation, other); end

  def merge; end
  def normal_values; end
  def other; end
  def relation; end
  def values; end

  private

  def merge_clauses; end
  def merge_joins; end
  def merge_multi_values; end
  def merge_preloads; end
  def merge_single_values; end
end

ActiveRecord::Relation::Merger::CLAUSE_METHOD_NAMES = T.let(T.unsafe(nil), Array)
ActiveRecord::Relation::Merger::NORMAL_VALUES = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::QueryAttribute < ::ActiveRecord::Attribute
  def type_cast(value); end
  def value_for_database; end
  def with_cast_value(value); end
end

ActiveRecord::Relation::SINGLE_VALUE_METHODS = T.let(T.unsafe(nil), Array)
ActiveRecord::Relation::VALUE_METHODS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::WhereClause
  def initialize(predicates, binds); end

  def +(other); end
  def ==(other); end
  def any?(*args, &block); end
  def ast; end
  def binds; end
  def empty?(*args, &block); end
  def except(*columns); end
  def invert; end
  def merge(other); end
  def or(other); end
  def to_h(table_name = T.unsafe(nil)); end

  protected

  def predicates; end
  def referenced_columns; end

  private

  def binds_except(columns); end
  def equality_node?(node); end
  def invert_predicate(node); end
  def inverted_predicates; end
  def non_conflicting_binds(other); end
  def non_empty_predicates; end
  def predicates_except(columns); end
  def predicates_unreferenced_by(other); end
  def predicates_with_wrapped_sql_literals; end
  def wrap_sql_literal(node); end

  class << self
    def empty; end
  end
end

ActiveRecord::Relation::WhereClause::ARRAY_WITH_EMPTY_STRING = T.let(T.unsafe(nil), Array)

class ActiveRecord::Relation::WhereClauseFactory
  def initialize(klass, predicate_builder); end

  def build(opts, other); end

  protected

  def klass; end
  def predicate_builder; end
end

class ActiveRecord::Result
  include ::Enumerable

  def initialize(columns, rows, column_types = T.unsafe(nil)); end

  def [](idx); end
  def cast_values(type_overrides = T.unsafe(nil)); end
  def collect!; end
  def column_types; end
  def columns; end
  def each; end
  def empty?; end
  def first; end
  def last; end
  def length; end
  def map!; end
  def rows; end
  def to_ary; end
  def to_hash; end

  private

  def column_type(name, type_overrides = T.unsafe(nil)); end
  def hash_rows; end
  def initialize_copy(other); end
end

ActiveRecord::Result::IDENTITY_TYPE = T.let(T.unsafe(nil), ActiveModel::Type::Value)
class ActiveRecord::Rollback < ::ActiveRecord::ActiveRecordError; end

class ActiveRecord::RuntimeRegistry
  extend ::ActiveSupport::PerThreadRegistry

  def connection_handler; end
  def connection_handler=(_arg0); end
  def connection_id; end
  def connection_id=(_arg0); end
  def sql_runtime; end
  def sql_runtime=(_arg0); end

  class << self
    def connection_handler; end
    def connection_handler=(x); end
    def connection_id; end
    def connection_id=(x); end
    def sql_runtime; end
    def sql_runtime=(x); end
  end
end

module ActiveRecord::Sanitization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Sanitization::ClassMethods

  def quoted_id; end
end

module ActiveRecord::Sanitization::ClassMethods
  def quote_value(object); end
  def sanitize(object); end

  protected

  def expand_hash_conditions_for_aggregates(attrs); end
  def quote_bound_value(value, c = T.unsafe(nil)); end
  def raise_if_bind_arity_mismatch(statement, expected, provided); end
  def replace_bind_variable(value, c = T.unsafe(nil)); end
  def replace_bind_variables(statement, values); end
  def replace_named_bind_variables(statement, bind_vars); end
  def sanitize_conditions(condition); end
  def sanitize_sql(condition); end
  def sanitize_sql_array(ary); end
  def sanitize_sql_for_assignment(assignments, default_table_name = T.unsafe(nil)); end
  def sanitize_sql_for_conditions(condition); end
  def sanitize_sql_for_order(condition); end
  def sanitize_sql_hash_for_assignment(attrs, table); end
  def sanitize_sql_like(string, escape_character = T.unsafe(nil)); end
end

class ActiveRecord::Schema < ::ActiveRecord::Migration::Current
  def define(info, &block); end

  private

  def migrations_paths; end

  class << self
    def define(info = T.unsafe(nil), &block); end
  end
end

class ActiveRecord::SchemaDumper
  def initialize(connection, options = T.unsafe(nil)); end

  def dump(stream); end
  def ignore_tables; end
  def ignore_tables=(obj); end

  private

  def extensions(stream); end
  def foreign_keys(table, stream); end
  def format_options(options); end
  def header(stream); end
  def ignored?(table_name); end
  def index_parts(index); end
  def indexes(table, stream); end
  def indexes_in_create(table, stream); end
  def remove_prefix_and_suffix(table); end
  def table(table, stream); end
  def tables(stream); end
  def trailer(stream); end

  class << self
    def dump(connection = T.unsafe(nil), stream = T.unsafe(nil), config = T.unsafe(nil)); end
    def ignore_tables; end
    def ignore_tables=(obj); end

    private

    def generate_options(config); end
  end
end

class ActiveRecord::SchemaMigration < ::ActiveRecord::Base
  include ::ActiveRecord::SchemaMigration::GeneratedAssociationMethods

  def version; end

  class << self
    def _validators; end
    def attribute_type_decorations; end
    def create_table; end
    def defined_enums; end
    def drop_table; end
    def normalize_migration_number(number); end
    def normalized_versions; end
    def primary_key; end
    def table_exists?; end
    def table_name; end
  end
end

class ActiveRecord::SchemaMigration::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
end

class ActiveRecord::SchemaMigration::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
end

class ActiveRecord::SchemaMigration::ActiveRecord_Relation < ::ActiveRecord::Relation
  include ::ActiveRecord::Delegation::ClassSpecificRelation
  extend ::ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
end

module ActiveRecord::SchemaMigration::GeneratedAssociationMethods; end

module ActiveRecord::Scoping
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Autoload
  include ::ActiveRecord::Scoping::Default
  include ::ActiveRecord::Scoping::Named

  mixes_in_class_methods ::ActiveRecord::Scoping::ClassMethods

  def initialize_internals_callback; end
  def populate_with_current_scope_attributes; end
end

module ActiveRecord::Scoping::ClassMethods
  def current_scope(skip_inherited_scope = T.unsafe(nil)); end
  def current_scope=(scope); end
  def scope_attributes; end
  def scope_attributes?; end
end

module ActiveRecord::Scoping::Default
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Scoping::Default::ClassMethods
end

module ActiveRecord::Scoping::Default::ClassMethods
  def before_remove_const; end
  def scope_attributes?; end
  def unscoped; end

  protected

  def build_default_scope(base_rel = T.unsafe(nil)); end
  def default_scope(scope = T.unsafe(nil)); end
  def evaluate_default_scope; end
  def ignore_default_scope=(ignore); end
  def ignore_default_scope?; end
end

module ActiveRecord::Scoping::Named
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Scoping::Named::ClassMethods
end

module ActiveRecord::Scoping::Named::ClassMethods
  def all; end
  def default_extensions; end
  def default_scoped(scope = T.unsafe(nil)); end
  def scope(name, body, &block); end
  def scope_for_association(scope = T.unsafe(nil)); end

  protected

  def valid_scope_name?(name); end
end

class ActiveRecord::Scoping::ScopeRegistry
  extend ::ActiveSupport::PerThreadRegistry

  def initialize; end

  def set_value_for(scope_type, model, value); end
  def value_for(scope_type, model, skip_inherited_scope = T.unsafe(nil)); end

  private

  def raise_invalid_scope_type!(scope_type); end
end

ActiveRecord::Scoping::ScopeRegistry::VALID_SCOPE_TYPES = T.let(T.unsafe(nil), Array)

module ActiveRecord::SecureToken
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::SecureToken::ClassMethods
end

module ActiveRecord::SecureToken::ClassMethods
  def generate_unique_secure_token; end
  def has_secure_token(attribute = T.unsafe(nil)); end
end

module ActiveRecord::Serialization
  extend ::ActiveSupport::Concern
  include ::ActiveModel::Serializers::JSON

  def serializable_hash(options = T.unsafe(nil)); end
end

class ActiveRecord::SerializationTypeMismatch < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::SpawnMethods
  def except(*skips); end
  def merge(other); end
  def merge!(other); end
  def only(*onlies); end
  def spawn; end

  private

  def relation_with(values); end
end

class ActiveRecord::StaleObjectError < ::ActiveRecord::ActiveRecordError
  def initialize(record = T.unsafe(nil), attempted_action = T.unsafe(nil)); end

  def attempted_action; end
  def record; end
end

class ActiveRecord::StatementCache
  def initialize(query_builder, bind_map); end

  def bind_map; end
  def call(params, klass, connection, &block); end
  def execute(params, klass, connection, &block); end
  def query_builder; end

  class << self
    def create(connection, block = T.unsafe(nil)); end
    def partial_query(visitor, ast, collector); end
    def query(visitor, ast); end
  end
end

class ActiveRecord::StatementCache::BindMap
  def initialize(bound_attributes); end

  def bind(values); end
end

class ActiveRecord::StatementCache::Params
  def bind; end
end

class ActiveRecord::StatementCache::PartialQuery < ::ActiveRecord::StatementCache::Query
  def initialize(values); end

  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Query
  def initialize(sql); end

  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Substitute; end

class ActiveRecord::StatementInvalid < ::ActiveRecord::ActiveRecordError
  def initialize(message = T.unsafe(nil), original_exception = T.unsafe(nil)); end

  def original_exception; end
end

module ActiveRecord::Store
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Store::ClassMethods

  protected

  def read_store_attribute(store_attribute, key); end
  def write_store_attribute(store_attribute, key, value); end

  private

  def store_accessor_for(store_attribute); end
end

module ActiveRecord::Store::ClassMethods
  def _store_accessors_module; end
  def store(store_attribute, options = T.unsafe(nil)); end
  def store_accessor(store_attribute, *keys); end
  def stored_attributes; end
end

class ActiveRecord::Store::HashAccessor
  class << self
    def prepare(object, attribute); end
    def read(object, attribute, key); end
    def write(object, attribute, key, value); end
  end
end

class ActiveRecord::Store::IndifferentCoder
  def initialize(coder_or_class_name); end

  def dump(obj); end
  def load(yaml); end

  class << self
    def as_indifferent_hash(obj); end
  end
end

class ActiveRecord::Store::IndifferentHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    def prepare(object, store_attribute); end
  end
end

class ActiveRecord::Store::StringKeyedHashAccessor < ::ActiveRecord::Store::HashAccessor
  class << self
    def read(object, attribute, key); end
    def write(object, attribute, key, value); end
  end
end

class ActiveRecord::SubclassNotFound < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Suppressor
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Suppressor::ClassMethods

  def save(*_arg0); end
  def save!(*_arg0); end
end

module ActiveRecord::Suppressor::ClassMethods
  def suppress(&block); end
end

class ActiveRecord::SuppressorRegistry
  extend ::ActiveSupport::PerThreadRegistry

  def initialize; end

  def suppressed; end
end

class ActiveRecord::TableMetadata
  def initialize(klass, arel_table, association = T.unsafe(nil)); end

  def arel_attribute(column_name); end
  def associated_table(table_name); end
  def associated_with?(association_name); end
  def association_foreign_key(*args, &block); end
  def association_foreign_type(*args, &block); end
  def association_primary_key(*args, &block); end
  def polymorphic_association?; end
  def resolve_column_aliases(hash); end
  def type(column_name); end

  protected

  def arel_table; end
  def association; end
  def klass; end
end

module ActiveRecord::Tasks
  extend ::ActiveSupport::Autoload
end

class ActiveRecord::Tasks::DatabaseAlreadyExists < ::StandardError; end
class ActiveRecord::Tasks::DatabaseNotSupported < ::StandardError; end

module ActiveRecord::Tasks::DatabaseTasks
  extend ::ActiveRecord::Tasks::DatabaseTasks

  def charset(*arguments); end
  def charset_current(environment = T.unsafe(nil)); end
  def check_protected_environments!; end
  def check_schema_file(filename); end
  def collation(*arguments); end
  def collation_current(environment = T.unsafe(nil)); end
  def create(*arguments); end
  def create_all; end
  def create_current(environment = T.unsafe(nil)); end
  def current_config(options = T.unsafe(nil)); end
  def current_config=(_arg0); end
  def database_configuration; end
  def database_configuration=(_arg0); end
  def db_dir; end
  def db_dir=(_arg0); end
  def drop(*arguments); end
  def drop_all; end
  def drop_current(environment = T.unsafe(nil)); end
  def env; end
  def env=(_arg0); end
  def fixtures_path; end
  def fixtures_path=(_arg0); end
  def load_schema(configuration, format = T.unsafe(nil), file = T.unsafe(nil), environment = T.unsafe(nil)); end
  def load_schema_current(format = T.unsafe(nil), file = T.unsafe(nil), environment = T.unsafe(nil)); end
  def load_schema_for(*args); end
  def load_seed; end
  def migrate; end
  def migrations_paths; end
  def migrations_paths=(_arg0); end
  def purge(configuration); end
  def purge_all; end
  def purge_current(environment = T.unsafe(nil)); end
  def register_task(pattern, task); end
  def root; end
  def root=(_arg0); end
  def schema_file(format = T.unsafe(nil)); end
  def seed_loader; end
  def seed_loader=(_arg0); end
  def structure_dump(*arguments); end
  def structure_load(*arguments); end

  private

  def class_for_adapter(adapter); end
  def each_current_configuration(environment); end
  def each_local_configuration; end
  def local_database?(configuration); end
end

ActiveRecord::Tasks::DatabaseTasks::LOCAL_HOSTS = T.let(T.unsafe(nil), Array)

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def initialize(configuration); end

  def charset; end
  def collation; end
  def connection(*args, &block); end
  def create; end
  def drop; end
  def establish_connection(*args, &block); end
  def purge; end
  def structure_dump(filename); end
  def structure_load(filename); end

  private

  def configuration; end
  def configuration_without_database; end
  def creation_options; end
  def error_class; end
  def grant_statement; end
  def prepare_command_options; end
  def root_configuration_without_database; end
  def root_password; end
  def run_cmd(cmd, args, action); end
  def run_cmd_error(cmd, args, action); end
end

ActiveRecord::Tasks::MySQLDatabaseTasks::ACCESS_DENIED_ERROR = T.let(T.unsafe(nil), Integer)

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def initialize(configuration); end

  def charset; end
  def clear_active_connections!(*args, &block); end
  def collation; end
  def connection(*args, &block); end
  def create(master_established = T.unsafe(nil)); end
  def drop; end
  def establish_connection(*args, &block); end
  def purge; end
  def structure_dump(filename); end
  def structure_load(filename); end

  private

  def configuration; end
  def encoding; end
  def establish_master_connection; end
  def run_cmd(cmd, args, action); end
  def run_cmd_error(cmd, args, action); end
  def set_psql_env; end
end

ActiveRecord::Tasks::PostgreSQLDatabaseTasks::DEFAULT_ENCODING = T.let(T.unsafe(nil), String)

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def initialize(configuration, root = T.unsafe(nil)); end

  def charset; end
  def connection(*args, &block); end
  def create; end
  def drop; end
  def establish_connection(*args, &block); end
  def purge; end
  def structure_dump(filename); end
  def structure_load(filename); end

  private

  def configuration; end
  def root; end
end

module ActiveRecord::TestFixtures
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::TestFixtures::ClassMethods

  def after_teardown; end
  def before_setup; end
  def enlist_fixture_connections; end
  def run_in_transaction?; end
  def setup_fixtures(config = T.unsafe(nil)); end
  def teardown_fixtures; end

  private

  def instantiate_fixtures; end
  def load_fixtures(config); end
  def load_instances?; end
end

module ActiveRecord::TestFixtures::ClassMethods
  def fixtures(*fixture_set_names); end
  def set_fixture_class(class_names = T.unsafe(nil)); end
  def setup_fixture_accessors(fixture_set_names = T.unsafe(nil)); end
  def uses_transaction(*methods); end
  def uses_transaction?(method); end
end

class ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection < ::ActiveRecord::ActiveRecordError
  def initialize(owner = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

class ActiveRecord::ThroughNestedAssociationsAreReadonly < ::ActiveRecord::ActiveRecordError
  def initialize(owner = T.unsafe(nil), reflection = T.unsafe(nil)); end
end

module ActiveRecord::Timestamp
  extend ::ActiveSupport::Concern

  private

  def _create_record; end
  def _update_record(*args, touch: T.unsafe(nil), **options); end
  def all_timestamp_attributes; end
  def all_timestamp_attributes_in_model; end
  def clear_timestamp_attributes; end
  def current_time_from_proper_timezone; end
  def initialize_dup(other); end
  def max_updated_column_timestamp(timestamp_names = T.unsafe(nil)); end
  def should_record_timestamps?; end
  def timestamp_attributes_for_create; end
  def timestamp_attributes_for_create_in_model; end
  def timestamp_attributes_for_update; end
  def timestamp_attributes_for_update_in_model; end
end

module ActiveRecord::TouchLater
  extend ::ActiveSupport::Concern

  def touch(*names, time: T.unsafe(nil)); end
  def touch_later(*names); end

  private

  def belongs_to_touch_method; end
  def has_defer_touch_attrs?; end
  def surreptitiously_touch(attrs); end
  def touch_deferred_attributes; end
end

class ActiveRecord::TransactionIsolationError < ::ActiveRecord::ActiveRecordError; end

module ActiveRecord::Transactions
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveRecord::Transactions::ClassMethods

  def add_to_transaction; end
  def before_committed!; end
  def committed!(should_run_callbacks: T.unsafe(nil)); end
  def destroy; end
  def rollback_active_record_state!; end
  def rolledback!(force_restore_state: T.unsafe(nil), should_run_callbacks: T.unsafe(nil)); end
  def save(*_arg0); end
  def save!(*_arg0); end
  def touch(*_arg0); end
  def transaction(options = T.unsafe(nil), &block); end
  def with_transaction_returning_status; end

  protected

  def clear_transaction_record_state; end
  def force_clear_transaction_record_state; end
  def remember_transaction_record_state; end
  def restore_transaction_record_state(force = T.unsafe(nil)); end
  def transaction_include_any_action?(actions); end
  def transaction_record_state(state); end

  private

  def has_transactional_callbacks?; end
  def set_transaction_state(state); end
  def sync_with_transaction_state; end
  def update_attributes_from_transaction_state(transaction_state); end
end

ActiveRecord::Transactions::ACTIONS = T.let(T.unsafe(nil), Array)

module ActiveRecord::Transactions::ClassMethods
  def after_commit(*args, &block); end
  def after_commit_without_transaction_enrollment(*args, &block); end
  def after_create_commit(*args, &block); end
  def after_destroy_commit(*args, &block); end
  def after_rollback(*args, &block); end
  def after_rollback_without_transaction_enrollment(*args, &block); end
  def after_update_commit(*args, &block); end
  def before_commit(*args, &block); end
  def before_commit_without_transaction_enrollment(*args, &block); end
  def raise_in_transactional_callbacks; end
  def raise_in_transactional_callbacks=(value); end
  def transaction(options = T.unsafe(nil), &block); end

  private

  def assert_valid_transaction_action(actions); end
  def set_options_for_callbacks!(args, enforced_options = T.unsafe(nil)); end
end

module ActiveRecord::Translation
  include ::ActiveModel::Naming
  include ::ActiveModel::Translation

  def i18n_scope; end
  def lookup_ancestors; end
end

module ActiveRecord::Type
  class << self
    def add_modifier(*args, &block); end
    def lookup(*args, adapter: T.unsafe(nil), **kwargs); end
    def register(type_name, klass = T.unsafe(nil), **options, &block); end
    def registry; end
    def registry=(_arg0); end

    private

    def current_adapter_name; end
  end
end

class ActiveRecord::Type::AdapterSpecificRegistry < ::ActiveModel::Type::Registry
  def add_modifier(options, klass, **args); end

  private

  def find_registration(symbol, *args); end
  def registration_klass; end
end

ActiveRecord::Type::BigInteger = ActiveModel::Type::BigInteger
ActiveRecord::Type::Binary = ActiveModel::Type::Binary
ActiveRecord::Type::Boolean = ActiveModel::Type::Boolean

class ActiveRecord::Type::Date < ::ActiveModel::Type::Date
  include ::ActiveRecord::Type::Internal::Timezone
end

class ActiveRecord::Type::DateTime < ::ActiveModel::Type::DateTime
  include ::ActiveRecord::Type::Internal::Timezone
end

ActiveRecord::Type::Decimal = ActiveModel::Type::Decimal
ActiveRecord::Type::DecimalWithoutScale = ActiveModel::Type::DecimalWithoutScale

class ActiveRecord::Type::DecorationRegistration < ::ActiveRecord::Type::Registration
  def initialize(options, klass, adapter: T.unsafe(nil)); end

  def call(registry, *args, **kwargs); end
  def matches?(*args, **kwargs); end
  def priority; end

  protected

  def klass; end
  def options; end

  private

  def matches_options?(**kwargs); end
end

ActiveRecord::Type::Float = ActiveModel::Type::Float

class ActiveRecord::Type::HashLookupTypeMap < ::ActiveRecord::Type::TypeMap
  def alias_type(type, alias_type); end
  def key?(key); end
  def keys; end

  private

  def perform_fetch(type, *args, &block); end
end

ActiveRecord::Type::Helpers = ActiveModel::Type::Helpers
ActiveRecord::Type::Integer = ActiveModel::Type::Integer
module ActiveRecord::Type::Internal; end

class ActiveRecord::Type::Internal::AbstractJson < ::ActiveModel::Type::Value
  include ::ActiveModel::Type::Helpers::Mutable

  def accessor; end
  def deserialize(value); end
  def serialize(value); end
  def type; end
end

module ActiveRecord::Type::Internal::Timezone
  def default_timezone; end
  def is_utc?; end
end

class ActiveRecord::Type::Registration
  def initialize(name, block, adapter: T.unsafe(nil), override: T.unsafe(nil)); end

  def <=>(other); end
  def call(_registry, *args, adapter: T.unsafe(nil), **kwargs); end
  def matches?(type_name, *args, **kwargs); end

  protected

  def adapter; end
  def block; end
  def name; end
  def override; end
  def priority; end
  def priority_except_adapter; end

  private

  def conflicts_with?(other); end
  def has_adapter_conflict?(other); end
  def matches_adapter?(adapter: T.unsafe(nil), **_arg1); end
  def same_priority_except_adapter?(other); end
end

class ActiveRecord::Type::Serialized
  include ::ActiveModel::Type::Helpers::Mutable

  def initialize(subtype, coder); end

  def accessor; end
  def assert_valid_value(value); end
  def changed_in_place?(raw_old_value, value); end
  def coder; end
  def deserialize(value); end
  def inspect; end
  def serialize(value); end
  def subtype; end

  private

  def default_value?(value); end
  def encoded(value); end
end

ActiveRecord::Type::String = ActiveModel::Type::String
ActiveRecord::Type::Text = ActiveModel::Type::Text

class ActiveRecord::Type::Time < ::ActiveModel::Type::Time
  include ::ActiveRecord::Type::Internal::Timezone

  def serialize(value); end
end

class ActiveRecord::Type::Time::Value; end

class ActiveRecord::Type::TypeMap
  def initialize; end

  def alias_type(key, target_key); end
  def clear; end
  def fetch(lookup_key, *args, &block); end
  def lookup(lookup_key, *args); end
  def register_type(key, value = T.unsafe(nil), &block); end

  private

  def default_value; end
  def perform_fetch(lookup_key, *args); end
end

ActiveRecord::Type::UnsignedInteger = ActiveModel::Type::UnsignedInteger
ActiveRecord::Type::Value = ActiveModel::Type::Value
module ActiveRecord::TypeCaster; end

class ActiveRecord::TypeCaster::Connection
  def initialize(klass, table_name); end

  def connection(*args, &block); end
  def type_cast_for_database(attribute_name, value); end

  protected

  def table_name; end

  private

  def column_for(attribute_name); end
end

class ActiveRecord::TypeCaster::Map
  def initialize(types); end

  def type_cast_for_database(attr_name, value); end

  protected

  def types; end
end

class ActiveRecord::TypeConflictError < ::StandardError; end
ActiveRecord::UnknownAttributeError = ActiveModel::UnknownAttributeError

class ActiveRecord::UnknownMigrationVersionError < ::ActiveRecord::MigrationError
  def initialize(version = T.unsafe(nil)); end
end

class ActiveRecord::UnknownPrimaryKey < ::ActiveRecord::ActiveRecordError
  def initialize(model = T.unsafe(nil), description = T.unsafe(nil)); end

  def model; end
end

module ActiveRecord::VERSION; end
ActiveRecord::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)
ActiveRecord::VERSION::MINOR = T.let(T.unsafe(nil), Integer)
ActiveRecord::VERSION::PRE = T.let(T.unsafe(nil), String)
ActiveRecord::VERSION::STRING = T.let(T.unsafe(nil), String)
ActiveRecord::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActiveRecord::Validations
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Validations

  mixes_in_class_methods ::ActiveRecord::Validations::ClassMethods

  def save(options = T.unsafe(nil)); end
  def save!(options = T.unsafe(nil)); end
  def valid?(context = T.unsafe(nil)); end
  def validate(context = T.unsafe(nil)); end

  protected

  def default_validation_context; end
  def perform_validations(options = T.unsafe(nil)); end
  def raise_validation_error; end
end

class ActiveRecord::Validations::AbsenceValidator < ::ActiveModel::Validations::AbsenceValidator
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::AssociatedValidator < ::ActiveModel::EachValidator
  def validate_each(record, attribute, value); end

  private

  def valid_object?(record); end
end

module ActiveRecord::Validations::ClassMethods
  def validates_absence_of(*attr_names); end
  def validates_associated(*attr_names); end
  def validates_length_of(*attr_names); end
  def validates_presence_of(*attr_names); end
  def validates_size_of(*attr_names); end
  def validates_uniqueness_of(*attr_names); end
end

class ActiveRecord::Validations::LengthValidator < ::ActiveModel::Validations::LengthValidator
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::PresenceValidator < ::ActiveModel::Validations::PresenceValidator
  def validate_each(record, attribute, association_or_value); end
end

class ActiveRecord::Validations::UniquenessValidator < ::ActiveModel::EachValidator
  def initialize(options); end

  def validate_each(record, attribute, value); end

  protected

  def build_relation(klass, table, attribute, value); end
  def find_finder_class_for(record); end
  def map_enum_attribute(klass, attribute, value); end
  def scope_relation(record, table, relation); end
end

class ActiveRecord::ValueTooLong < ::ActiveRecord::StatementInvalid; end
class ActiveRecord::WrappedDatabaseException < ::ActiveRecord::StatementInvalid; end
