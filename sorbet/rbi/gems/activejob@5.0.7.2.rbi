# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activejob` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module ActiveJob
  extend ::ActiveSupport::Autoload

  class << self
    def gem_version; end
    def version; end
  end
end

module ActiveJob::Arguments
  extend ::ActiveJob::Arguments

  def deserialize(arguments); end
  def serialize(arguments); end

  private

  def convert_to_global_id_hash(argument); end
  def deserialize_argument(argument); end
  def deserialize_global_id(hash); end
  def deserialize_hash(serialized_hash); end
  def serialize_argument(argument); end
  def serialize_hash(argument); end
  def serialize_hash_key(key); end
  def serialized_global_id?(hash); end
  def transform_symbol_keys(hash, symbol_keys); end
end

ActiveJob::Arguments::GLOBALID_KEY = T.let(T.unsafe(nil), String)
ActiveJob::Arguments::RESERVED_KEYS = T.let(T.unsafe(nil), Array)
ActiveJob::Arguments::SYMBOL_KEYS_KEY = T.let(T.unsafe(nil), String)
ActiveJob::Arguments::TYPE_WHITELIST = T.let(T.unsafe(nil), Array)
ActiveJob::Arguments::WITH_INDIFFERENT_ACCESS_KEY = T.let(T.unsafe(nil), String)

class ActiveJob::Base
  extend ::ActiveJob::Callbacks::ClassMethods
  include ::ActiveJob::QueueAdapter
  include ::ActiveJob::QueueName
  include ::ActiveJob::QueuePriority
  include ::ActiveJob::Enqueuing
  include ::ActiveSupport::Rescuable
  include ::ActiveJob::Execution
  include ::ActiveSupport::Callbacks
  include ::ActiveJob::Callbacks
  include ::ActiveJob::Logging
  include ::ActiveJob::Translation
  extend ::ActiveJob::Core::ClassMethods
  extend ::ActiveJob::QueueAdapter::ClassMethods
  extend ::ActiveJob::QueueName::ClassMethods
  extend ::ActiveJob::QueuePriority::ClassMethods
  extend ::ActiveJob::Enqueuing::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActiveJob::Execution::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  include ::ActiveJob::Core

  def _enqueue_callbacks; end
  def _enqueue_callbacks?; end
  def _perform_callbacks; end
  def _perform_callbacks?; end
  def _run_enqueue_callbacks(&block); end
  def _run_perform_callbacks(&block); end
  def arguments; end
  def arguments=(_arg0); end
  def job_id; end
  def job_id=(_arg0); end
  def locale; end
  def locale=(_arg0); end
  def logger; end
  def logger=(obj); end
  def priority=(_arg0); end
  def provider_job_id; end
  def provider_job_id=(_arg0); end
  def queue_name=(_arg0); end
  def rescue_handlers; end
  def rescue_handlers=(_arg0); end
  def rescue_handlers?; end
  def scheduled_at; end
  def scheduled_at=(_arg0); end
  def serialized_arguments=(_arg0); end

  class << self
    def _enqueue_callbacks; end
    def _enqueue_callbacks=(val); end
    def _enqueue_callbacks?; end
    def _perform_callbacks; end
    def _perform_callbacks=(val); end
    def _perform_callbacks?; end
    def _queue_adapter; end
    def _queue_adapter=(val); end
    def logger; end
    def logger=(obj); end
    def priority; end
    def priority=(val); end
    def priority?; end
    def queue_name; end
    def queue_name=(val); end
    def queue_name?; end
    def queue_name_delimiter; end
    def queue_name_delimiter=(val); end
    def queue_name_delimiter?; end
    def rescue_handlers; end
    def rescue_handlers=(val); end
    def rescue_handlers?; end
  end
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Callbacks
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods ::ActiveJob::Callbacks::ClassMethods

  class << self
    def _execute_callbacks; end
    def _execute_callbacks?; end
    def _run_execute_callbacks(&block); end
  end
end

module ActiveJob::Callbacks::ClassMethods
  def after_enqueue(*filters, &blk); end
  def after_perform(*filters, &blk); end
  def around_enqueue(*filters, &blk); end
  def around_perform(*filters, &blk); end
  def before_enqueue(*filters, &blk); end
  def before_perform(*filters, &blk); end
end

class ActiveJob::ConfiguredJob
  def initialize(job_class, options = T.unsafe(nil)); end

  def perform_later(*args); end
  def perform_now(*args); end
end

module ActiveJob::Core
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Core::ClassMethods

  def initialize(*arguments); end

  def deserialize(job_data); end
  def serialize; end

  private

  def deserialize_arguments(serialized_args); end
  def deserialize_arguments_if_needed; end
  def serialize_arguments(serialized_args); end
end

module ActiveJob::Core::ClassMethods
  def deserialize(job_data); end
  def set(options = T.unsafe(nil)); end
end

class ActiveJob::DeserializationError < ::StandardError
  def initialize(e = T.unsafe(nil)); end

  def original_exception; end
end

module ActiveJob::Enqueuing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Enqueuing::ClassMethods

  def enqueue(options = T.unsafe(nil)); end
  def retry_job(options = T.unsafe(nil)); end
end

module ActiveJob::Enqueuing::ClassMethods
  def perform_later(*args); end

  protected

  def job_or_instantiate(*args); end
end

module ActiveJob::Execution
  extend ::ActiveSupport::Concern
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods ::ActiveJob::Execution::ClassMethods

  def perform(*_arg0); end
  def perform_now; end
end

module ActiveJob::Execution::ClassMethods
  def execute(job_data); end
  def perform_now(*args); end
end

module ActiveJob::Logging
  extend ::ActiveSupport::Concern

  private

  def logger_tagged_by_active_job?; end
  def tag_logger(*tags); end
end

class ActiveJob::Logging::LogSubscriber < ::ActiveSupport::LogSubscriber
  def enqueue(event); end
  def enqueue_at(event); end
  def perform(event); end
  def perform_start(event); end

  private

  def args_info(job); end
  def format(arg); end
  def logger; end
  def queue_name(event); end
  def scheduled_at(event); end
end

module ActiveJob::QueueAdapter
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::QueueAdapter::ClassMethods
end

module ActiveJob::QueueAdapter::ClassMethods
  def queue_adapter; end
  def queue_adapter=(name_or_adapter_or_class); end

  private

  def interpret_adapter(name_or_adapter_or_class); end
  def queue_adapter?(object); end
  def queue_adapter_class?(object); end
end

ActiveJob::QueueAdapter::ClassMethods::QUEUE_ADAPTER_METHODS = T.let(T.unsafe(nil), Array)

module ActiveJob::QueueAdapters
  extend ::ActiveSupport::Autoload

  class << self
    def lookup(name); end
  end
end

ActiveJob::QueueAdapters::ADAPTER = T.let(T.unsafe(nil), String)

class ActiveJob::QueueAdapters::AsyncAdapter
  def initialize(**executor_options); end

  def enqueue(job); end
  def enqueue_at(job, timestamp); end
  def immediate=(immediate); end
  def shutdown(wait: T.unsafe(nil)); end
end

class ActiveJob::QueueAdapters::AsyncAdapter::JobWrapper
  def initialize(job); end

  def perform; end
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  def initialize(**options); end

  def enqueue(job, queue_name:); end
  def enqueue_at(job, timestamp, queue_name:); end
  def executor; end
  def immediate; end
  def immediate=(_arg0); end
  def shutdown(wait: T.unsafe(nil)); end
end

ActiveJob::QueueAdapters::AsyncAdapter::Scheduler::DEFAULT_EXECUTOR_OPTIONS = T.let(T.unsafe(nil), Hash)

class ActiveJob::QueueAdapters::InlineAdapter
  def enqueue(job); end
  def enqueue_at(*_arg0); end
end

class ActiveJob::QueueAdapters::TestAdapter
  def enqueue(job); end
  def enqueue_at(job, timestamp); end
  def enqueued_jobs; end
  def enqueued_jobs=(_arg0); end
  def filter; end
  def filter=(_arg0); end
  def perform_enqueued_at_jobs; end
  def perform_enqueued_at_jobs=(_arg0); end
  def perform_enqueued_jobs; end
  def perform_enqueued_jobs=(_arg0); end
  def performed_jobs; end
  def performed_jobs=(_arg0); end

  private

  def enqueue_or_perform(perform, job, job_data); end
  def filtered?(job); end
  def job_to_hash(job, extras = T.unsafe(nil)); end
end

module ActiveJob::QueueName
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::QueueName::ClassMethods

  def queue_name; end
end

module ActiveJob::QueueName::ClassMethods
  def default_queue_name; end
  def default_queue_name=(obj); end
  def queue_as(part_name = T.unsafe(nil), &block); end
  def queue_name_from_part(part_name); end
  def queue_name_prefix; end
  def queue_name_prefix=(obj); end

  class << self
    def default_queue_name; end
    def default_queue_name=(obj); end
    def queue_name_prefix; end
    def queue_name_prefix=(obj); end
  end
end

module ActiveJob::QueuePriority
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::QueuePriority::ClassMethods

  def priority; end
end

module ActiveJob::QueuePriority::ClassMethods
  def default_priority; end
  def default_priority=(obj); end
  def queue_with_priority(priority = T.unsafe(nil), &block); end

  class << self
    def default_priority; end
    def default_priority=(obj); end
  end
end

class ActiveJob::Railtie < ::Rails::Railtie; end
class ActiveJob::SerializationError < ::ArgumentError; end

class ActiveJob::TestCase < ::ActiveSupport::TestCase
  include ::ActiveJob::TestHelper
end

module ActiveJob::TestHelper
  def after_teardown; end
  def assert_enqueued_jobs(number, only: T.unsafe(nil)); end
  def assert_enqueued_with(args = T.unsafe(nil)); end
  def assert_no_enqueued_jobs(only: T.unsafe(nil), &block); end
  def assert_no_performed_jobs(only: T.unsafe(nil), &block); end
  def assert_performed_jobs(number, only: T.unsafe(nil)); end
  def assert_performed_with(args = T.unsafe(nil)); end
  def before_setup; end
  def enqueued_jobs(*args, &block); end
  def enqueued_jobs=(arg); end
  def perform_enqueued_jobs(only: T.unsafe(nil)); end
  def performed_jobs(*args, &block); end
  def performed_jobs=(arg); end
  def queue_adapter; end
  def queue_adapter_for_test; end

  private

  def clear_enqueued_jobs; end
  def clear_performed_jobs; end
  def enqueued_jobs_size(only: T.unsafe(nil)); end
  def instantiate_job(payload); end
  def serialize_args_for_assertion(args); end
end

module ActiveJob::Translation
  extend ::ActiveSupport::Concern
end

module ActiveJob::VERSION; end
ActiveJob::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)
ActiveJob::VERSION::MINOR = T.let(T.unsafe(nil), Integer)
ActiveJob::VERSION::PRE = T.let(T.unsafe(nil), String)
ActiveJob::VERSION::STRING = T.let(T.unsafe(nil), String)
ActiveJob::VERSION::TINY = T.let(T.unsafe(nil), Integer)
