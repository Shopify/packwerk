# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `erubis` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Erubis; end

module Erubis::ArrayBufferEnhancer
  def add_postamble(src); end
  def add_preamble(src); end

  class << self
    def desc; end
  end
end

module Erubis::ArrayEnhancer
  def add_postamble(src); end
  def add_preamble(src); end

  class << self
    def desc; end
  end
end

module Erubis::Basic; end

module Erubis::Basic::Converter
  include ::Erubis::Converter

  def add_expr(src, code, indicator); end
  def convert_input(src, input); end
  def init_converter(properties = T.unsafe(nil)); end
  def pattern; end
  def pattern=(_arg0); end
  def trim; end
  def trim=(_arg0); end

  private

  def pattern_regexp(pattern); end

  class << self
    def pattern_regexp(pattern); end
    def supported_properties; end
  end
end

Erubis::Basic::Converter::DEFAULT_REGEXP = T.let(T.unsafe(nil), Regexp)

class Erubis::Basic::Engine < ::Erubis::Engine
  include ::Erubis::Evaluator
  include ::Erubis::Converter
  include ::Erubis::Basic::Converter
  include ::Erubis::Generator
end

module Erubis::BiPatternEnhancer
  def initialize(input, properties = T.unsafe(nil)); end

  def add_text(src, text); end
  def bipattern=(pat); end

  class << self
    def desc; end
  end
end

class Erubis::Context
  include ::Enumerable

  def initialize(hash = T.unsafe(nil)); end

  def [](key); end
  def []=(key, value); end
  def each; end
  def keys; end
  def to_hash; end
  def update(context_or_hash); end
end

module Erubis::Converter
  def convert(input); end
  def escape; end
  def escape=(_arg0); end
  def init_converter(properties = T.unsafe(nil)); end
  def postamble; end
  def postamble=(_arg0); end
  def preamble; end
  def preamble=(_arg0); end

  protected

  def convert_input(codebuf, input); end
  def detect_spaces_at_bol(text, is_bol); end

  class << self
    def supported_properties; end
  end
end

module Erubis::DeleteIndentEnhancer
  def convert_input(src, input); end

  class << self
    def desc; end
  end
end

Erubis::EMPTY_BINDING = T.let(T.unsafe(nil), Binding)

class Erubis::Engine
  def initialize(input = T.unsafe(nil), properties = T.unsafe(nil)); end

  def convert!(input); end
  def process(input, context = T.unsafe(nil), filename = T.unsafe(nil)); end
  def process_proc(proc_obj, context = T.unsafe(nil), filename = T.unsafe(nil)); end

  class << self
    def load_file(filename, properties = T.unsafe(nil)); end
  end
end

module Erubis::ErboutEnhancer
  def add_postamble(src); end
  def add_preamble(src); end

  class << self
    def desc; end
  end
end

class Erubis::ErubisError < ::StandardError; end

class Erubis::Eruby < ::Erubis::Basic::Engine
  include ::Erubis::RubyEvaluator
  include ::Erubis::StringBufferEnhancer
  include ::Erubis::RubyGenerator
end

module Erubis::EscapeEnhancer
  def add_expr(src, code, indicator); end

  class << self
    def desc; end
  end
end

class Erubis::EscapedEruby < ::Erubis::Eruby
  include ::Erubis::EscapeEnhancer
end

module Erubis::Evaluator
  def evaluate(*args); end
  def filename; end
  def filename=(_arg0); end
  def init_evaluator(properties); end
  def result(*args); end
  def src; end
  def src=(_arg0); end

  class << self
    def supported_properties; end
  end
end

class Erubis::FastEruby < ::Erubis::Eruby
  include ::Erubis::InterpolationEnhancer
end

module Erubis::Generator
  def add_expr_debug(src, code); end
  def add_expr_escaped(src, code); end
  def add_expr_literal(src, code); end
  def add_postamble(src); end
  def add_preamble(src); end
  def add_stmt(src, code); end
  def add_text(src, text); end
  def escape_text(text); end
  def escaped_expr(code); end
  def escapefunc; end
  def escapefunc=(_arg0); end
  def init_generator(properties = T.unsafe(nil)); end

  class << self
    def supported_properties; end
  end
end

module Erubis::HeaderFooterEnhancer
  def add_text(src, text); end
  def convert(input); end
  def footer; end
  def footer=(_arg0); end
  def header; end
  def header=(_arg0); end

  class << self
    def desc; end
  end
end

Erubis::HeaderFooterEnhancer::HEADER_FOOTER_PATTERN = T.let(T.unsafe(nil), Regexp)

module Erubis::InterpolationEnhancer
  def _add_text_to_str(str, text); end
  def add_expr_escaped(str, code); end
  def add_expr_literal(str, code); end
  def add_text(src, text); end
  def convert_input(src, input); end

  class << self
    def desc; end
  end
end

module Erubis::NoCodeEnhancer
  def add_expr(src, code, indicator); end
  def add_postamble(src); end
  def add_preamble(src); end
  def add_stmt(src, code); end
  def add_text(src, text); end

  class << self
    def desc; end
  end
end

module Erubis::NoTextEnhancer
  def add_text(src, text); end

  class << self
    def desc; end
  end
end

class Erubis::NotSupportedError < ::Erubis::ErubisError; end
module Erubis::PI; end

module Erubis::PI::Converter
  include ::Erubis::Converter

  def convert(input); end
  def init_converter(properties = T.unsafe(nil)); end
  def pi; end
  def pi=(_arg0); end
  def prefix; end
  def prefix=(_arg0); end

  protected

  def add_pi_expr(codebuf, code, indicator); end
  def add_pi_stmt(codebuf, code, pi_arg); end
  def convert_input(codebuf, input); end

  class << self
    def desc; end
    def supported_properties; end
  end
end

class Erubis::PI::Engine < ::Erubis::Engine
  include ::Erubis::Evaluator
  include ::Erubis::Converter
  include ::Erubis::PI::Converter
  include ::Erubis::Generator
end

class Erubis::PI::Eruby < ::Erubis::PI::Engine
  include ::Erubis::RubyEvaluator
  include ::Erubis::StringBufferEnhancer
  include ::Erubis::RubyGenerator

  def init_converter(properties = T.unsafe(nil)); end
end

module Erubis::PercentLineEnhancer
  include ::Erubis::PrefixedLineEnhancer

  def add_text(src, text); end

  class << self
    def desc; end
  end
end

module Erubis::PrefixedLineEnhancer
  def add_text(src, text); end
  def init_generator(properties = T.unsafe(nil)); end

  class << self
    def desc; end
  end
end

module Erubis::PrintEnabledEnhancer
  def add_preamble(src); end
  def evaluate(context = T.unsafe(nil)); end
  def print(*args); end

  class << self
    def desc; end
  end
end

module Erubis::PrintOutEnhancer
  def add_expr_escaped(src, code); end
  def add_expr_literal(src, code); end
  def add_postamble(src); end
  def add_preamble(src); end
  def add_text(src, text); end

  class << self
    def desc; end
  end
end

module Erubis::RubyEvaluator
  include ::Erubis::Evaluator

  def def_method(object, method_name, filename = T.unsafe(nil)); end
  def evaluate(_context = T.unsafe(nil)); end
  def result(_binding_or_hash = T.unsafe(nil)); end

  class << self
    def supported_properties; end
  end
end

module Erubis::RubyGenerator
  include ::Erubis::Generator
  include ::Erubis::StringBufferEnhancer

  def add_expr_debug(src, code); end
  def add_expr_escaped(src, code); end
  def add_expr_literal(src, code); end
  def add_stmt(src, code); end
  def add_text(src, text); end
  def escape_text(text); end
  def escaped_expr(code); end
  def init_generator(properties = T.unsafe(nil)); end

  class << self
    def supported_properties; end
  end
end

module Erubis::SimplifyEnhancer
  def convert(input); end

  class << self
    def desc; end
  end
end

Erubis::SimplifyEnhancer::SIMPLE_REGEXP = T.let(T.unsafe(nil), Regexp)

module Erubis::StdoutEnhancer
  def add_postamble(src); end
  def add_preamble(src); end

  class << self
    def desc; end
  end
end

module Erubis::StringBufferEnhancer
  def add_postamble(src); end
  def add_preamble(src); end

  class << self
    def desc; end
  end
end

module Erubis::StringIOEnhancer
  def add_postamble(src); end
  def add_preamble(src); end

  class << self
    def desc; end
  end
end

Erubis::VERSION = T.let(T.unsafe(nil), String)

class Erubis::XmlEruby < ::Erubis::Eruby
  include ::Erubis::EscapeEnhancer
end

module Erubis::XmlHelper
  private

  def escape_xml(value); end
  def escape_xml2(value); end
  def h(value); end
  def html_escape(value); end
  def u(str); end
  def url_encode(str); end

  class << self
    def escape_xml(value); end
    def escape_xml2(value); end
    def url_encode(str); end
  end
end

Erubis::XmlHelper::ESCAPE_TABLE = T.let(T.unsafe(nil), Hash)

module Kernel
  private

  def not_implemented; end
end
